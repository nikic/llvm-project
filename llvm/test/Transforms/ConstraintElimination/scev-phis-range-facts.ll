; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -passes=constraint-elimination -S %s | FileCheck %s

define i1 @test_ult_loop_with_ult_icmp_N_at_end(ptr %s) {
; CHECK-LABEL: define i1 @test_ult_loop_with_ult_icmp_N_at_end(
; CHECK-SAME: ptr [[S:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[WHILE_COND:%.*]]
; CHECK:       while.cond:
; CHECK-NEXT:    [[I_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[WHILE_BODY:%.*]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[I_0]], 1234
; CHECK-NEXT:    br i1 [[CMP]], label [[WHILE_BODY]], label [[WHILE_END:%.*]]
; CHECK:       while.body:
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[S]], i64 [[I_0]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = add i8 [[TMP0]], -48
; CHECK-NEXT:    [[OR_COND:%.*]] = icmp ult i8 [[TMP1]], 10
; CHECK-NEXT:    [[ADD]] = add nuw nsw i64 [[I_0]], 1
; CHECK-NEXT:    br i1 [[OR_COND]], label [[WHILE_COND]], label [[WHILE_END]]
; CHECK:       while.end:
; CHECK-NEXT:    ret i1 true
;
entry:
  br label %while.cond

while.cond:
  %i.0 = phi i64 [ 0, %entry ], [ %add, %while.body ]
  %cmp = icmp ult i64 %i.0, 1234
  br i1 %cmp, label %while.body, label %while.end

while.body:
  %arrayidx = getelementptr inbounds i8, ptr %s, i64 %i.0
  %0 = load i8, ptr %arrayidx, align 1
  %1 = add i8 %0, -48
  %or.cond = icmp ult i8 %1, 10
  %add = add nuw nsw i64 %i.0, 1
  br i1 %or.cond, label %while.cond, label %while.end

while.end:
  %cmp6 = icmp ult i64 %i.0, 1235
  ret i1 %cmp6
}

define i1 @test_eq_loop_with_ult_icmp_N_at_end(ptr %s) {
; CHECK-LABEL: define i1 @test_eq_loop_with_ult_icmp_N_at_end(
; CHECK-SAME: ptr [[S:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[WHILE_COND:%.*]]
; CHECK:       while.cond:
; CHECK-NEXT:    [[I_0:%.*]] = phi i64 [ 0, [[ENTRY:%.*]] ], [ [[ADD:%.*]], [[WHILE_BODY:%.*]] ]
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[I_0]], 1234
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[WHILE_END:%.*]], label [[WHILE_BODY]]
; CHECK:       while.body:
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i8, ptr [[S]], i64 [[I_0]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[ARRAYIDX]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = add i8 [[TMP0]], -48
; CHECK-NEXT:    [[OR_COND:%.*]] = icmp ult i8 [[TMP1]], 10
; CHECK-NEXT:    [[ADD]] = add nuw nsw i64 [[I_0]], 1
; CHECK-NEXT:    br i1 [[OR_COND]], label [[WHILE_COND]], label [[WHILE_END]]
; CHECK:       while.end:
; CHECK-NEXT:    ret i1 true
;
entry:
  br label %while.cond

while.cond:
  %i.0 = phi i64 [ 0, %entry ], [ %add, %while.body ]
  %exitcond.not = icmp eq i64 %i.0, 1234
  br i1 %exitcond.not, label %while.end, label %while.body

while.body:
  %arrayidx = getelementptr inbounds i8, ptr %s, i64 %i.0
  %0 = load i8, ptr %arrayidx, align 1
  %1 = add i8 %0, -48
  %or.cond = icmp ult i8 %1, 10
  %add = add nuw nsw i64 %i.0, 1
;  %add = add i64 %i.0, 1
  br i1 %or.cond, label %while.cond, label %while.end

while.end:
  %cmp6 = icmp ult i64 %i.0, 1235
  ret i1 %cmp6
}
