; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes='default<O2>' -enable-matrix -S %s | FileCheck %s

target datalayout = "E-m:e-i1:8:16-i8:8:16-i64:64-f128:64-a:8:16-n32:64"
target triple = "systemz"

@ARR = internal global [100 x i32] zeroinitializer, align 4

; This test uses 'sub' instructions for gep offsets to allow
; codegen (LSR) to create optimal asm. If 'sub' is canonicalized
; to 'xor', then the backend needs to be able to see through
; that transform to produce optimal asm.

define dso_local zeroext i32 @foo(ptr noundef %a) #0 {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    tail call void @populate(ptr noundef nonnull @ARR) #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    [[DOTPRE36:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 68), align 4, !tbaa [[TBAA3:![0-9]+]]
; CHECK-NEXT:    [[DOTPRE35:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 69), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE34:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 70), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE33:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 71), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE32:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 72), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE31:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 73), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE30:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 74), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE29:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 75), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE28:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 76), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE27:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 77), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE26:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 78), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE25:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 79), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE24:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 80), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE23:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 81), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE22:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 82), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE21:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 83), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE20:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 84), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE19:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 85), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE18:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 86), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE17:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 87), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE16:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 88), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE15:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 89), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE14:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 90), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE13:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 91), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE12:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 92), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE11:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 93), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE10:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 94), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE9:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 95), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE8:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 96), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE7:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 97), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE6:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 98), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[DOTPRE:%.*]] = load i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 99), align 4, !tbaa [[TBAA3]]
; CHECK-NEXT:    [[ADD_1:%.*]] = add i32 [[DOTPRE6]], [[DOTPRE]]
; CHECK-NEXT:    [[ADD_2:%.*]] = add i32 [[DOTPRE7]], [[ADD_1]]
; CHECK-NEXT:    [[ADD_3:%.*]] = add i32 [[DOTPRE8]], [[ADD_2]]
; CHECK-NEXT:    [[ADD_4:%.*]] = add i32 [[DOTPRE9]], [[ADD_3]]
; CHECK-NEXT:    [[ADD_5:%.*]] = add i32 [[DOTPRE10]], [[ADD_4]]
; CHECK-NEXT:    [[ADD_6:%.*]] = add i32 [[DOTPRE11]], [[ADD_5]]
; CHECK-NEXT:    [[ADD_7:%.*]] = add i32 [[DOTPRE12]], [[ADD_6]]
; CHECK-NEXT:    [[ADD_8:%.*]] = add i32 [[DOTPRE13]], [[ADD_7]]
; CHECK-NEXT:    [[ADD_9:%.*]] = add i32 [[DOTPRE14]], [[ADD_8]]
; CHECK-NEXT:    [[ADD_10:%.*]] = add i32 [[DOTPRE15]], [[ADD_9]]
; CHECK-NEXT:    [[ADD_11:%.*]] = add i32 [[DOTPRE16]], [[ADD_10]]
; CHECK-NEXT:    [[ADD_12:%.*]] = add i32 [[DOTPRE17]], [[ADD_11]]
; CHECK-NEXT:    [[ADD_13:%.*]] = add i32 [[DOTPRE18]], [[ADD_12]]
; CHECK-NEXT:    [[ADD_14:%.*]] = add i32 [[DOTPRE19]], [[ADD_13]]
; CHECK-NEXT:    [[ADD_15:%.*]] = add i32 [[DOTPRE20]], [[ADD_14]]
; CHECK-NEXT:    [[ADD_16:%.*]] = add i32 [[DOTPRE21]], [[ADD_15]]
; CHECK-NEXT:    [[ADD_17:%.*]] = add i32 [[DOTPRE22]], [[ADD_16]]
; CHECK-NEXT:    [[ADD_18:%.*]] = add i32 [[DOTPRE23]], [[ADD_17]]
; CHECK-NEXT:    [[ADD_19:%.*]] = add i32 [[DOTPRE24]], [[ADD_18]]
; CHECK-NEXT:    [[ADD_20:%.*]] = add i32 [[DOTPRE25]], [[ADD_19]]
; CHECK-NEXT:    [[ADD_21:%.*]] = add i32 [[DOTPRE26]], [[ADD_20]]
; CHECK-NEXT:    [[ADD_22:%.*]] = add i32 [[DOTPRE27]], [[ADD_21]]
; CHECK-NEXT:    [[ADD_23:%.*]] = add i32 [[DOTPRE28]], [[ADD_22]]
; CHECK-NEXT:    [[ADD_24:%.*]] = add i32 [[DOTPRE29]], [[ADD_23]]
; CHECK-NEXT:    [[ADD_25:%.*]] = add i32 [[DOTPRE30]], [[ADD_24]]
; CHECK-NEXT:    [[ADD_26:%.*]] = add i32 [[DOTPRE31]], [[ADD_25]]
; CHECK-NEXT:    [[ADD_27:%.*]] = add i32 [[DOTPRE32]], [[ADD_26]]
; CHECK-NEXT:    [[ADD_28:%.*]] = add i32 [[DOTPRE33]], [[ADD_27]]
; CHECK-NEXT:    [[ADD_29:%.*]] = add i32 [[DOTPRE34]], [[ADD_28]]
; CHECK-NEXT:    [[ADD_30:%.*]] = add i32 [[DOTPRE35]], [[ADD_29]]
; CHECK-NEXT:    [[ADD_31:%.*]] = add i32 [[DOTPRE36]], [[ADD_30]]
; CHECK-NEXT:    [[TMP0:%.*]] = add i32 [[DOTPRE]], [[DOTPRE6]]
; CHECK-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], [[DOTPRE7]]
; CHECK-NEXT:    [[TMP2:%.*]] = add i32 [[TMP1]], [[DOTPRE8]]
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], [[DOTPRE9]]
; CHECK-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], [[DOTPRE10]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i32 [[TMP4]], [[DOTPRE11]]
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], [[DOTPRE12]]
; CHECK-NEXT:    [[TMP7:%.*]] = add i32 [[TMP6]], [[DOTPRE13]]
; CHECK-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], [[DOTPRE14]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], [[DOTPRE15]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], [[DOTPRE16]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], [[DOTPRE17]]
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[TMP11]], [[DOTPRE18]]
; CHECK-NEXT:    [[TMP13:%.*]] = add i32 [[TMP12]], [[DOTPRE19]]
; CHECK-NEXT:    [[TMP14:%.*]] = add i32 [[TMP13]], [[DOTPRE20]]
; CHECK-NEXT:    [[TMP15:%.*]] = add i32 [[TMP14]], [[DOTPRE21]]
; CHECK-NEXT:    [[TMP16:%.*]] = add i32 [[TMP15]], [[DOTPRE22]]
; CHECK-NEXT:    [[TMP17:%.*]] = add i32 [[TMP16]], [[DOTPRE23]]
; CHECK-NEXT:    [[TMP18:%.*]] = add i32 [[TMP17]], [[DOTPRE24]]
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP18]], [[DOTPRE25]]
; CHECK-NEXT:    [[TMP20:%.*]] = add i32 [[TMP19]], [[DOTPRE26]]
; CHECK-NEXT:    [[TMP21:%.*]] = add i32 [[TMP20]], [[DOTPRE27]]
; CHECK-NEXT:    [[TMP22:%.*]] = add i32 [[TMP21]], [[DOTPRE28]]
; CHECK-NEXT:    [[TMP23:%.*]] = add i32 [[TMP22]], [[DOTPRE29]]
; CHECK-NEXT:    [[TMP24:%.*]] = add i32 [[TMP23]], [[DOTPRE30]]
; CHECK-NEXT:    [[TMP25:%.*]] = add i32 [[TMP24]], [[DOTPRE31]]
; CHECK-NEXT:    [[TMP26:%.*]] = add i32 [[TMP25]], [[DOTPRE32]]
; CHECK-NEXT:    [[TMP27:%.*]] = add i32 [[TMP26]], [[DOTPRE33]]
; CHECK-NEXT:    [[TMP28:%.*]] = add i32 [[TMP27]], [[DOTPRE34]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[DOTPRE35]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[DOTPRE36]]
; CHECK-NEXT:    [[TMP31:%.*]] = shl i32 [[TMP30]], 1
; CHECK-NEXT:    [[ADD_31_1:%.*]] = add i32 [[TMP31]], [[ADD_31]]
; CHECK-NEXT:    [[MUL_239:%.*]] = mul i32 [[DOTPRE]], 3
; CHECK-NEXT:    [[ADD_240:%.*]] = add i32 [[MUL_239]], [[ADD_31_1]]
; CHECK-NEXT:    [[MUL_1_2:%.*]] = mul i32 [[DOTPRE6]], 3
; CHECK-NEXT:    [[ADD_1_2:%.*]] = add i32 [[MUL_1_2]], [[ADD_240]]
; CHECK-NEXT:    [[MUL_2_2:%.*]] = mul i32 [[DOTPRE7]], 3
; CHECK-NEXT:    [[ADD_2_2:%.*]] = add i32 [[MUL_2_2]], [[ADD_1_2]]
; CHECK-NEXT:    [[MUL_3_2:%.*]] = mul i32 [[DOTPRE8]], 3
; CHECK-NEXT:    [[ADD_3_2:%.*]] = add i32 [[MUL_3_2]], [[ADD_2_2]]
; CHECK-NEXT:    [[MUL_4_2:%.*]] = mul i32 [[DOTPRE9]], 3
; CHECK-NEXT:    [[ADD_4_2:%.*]] = add i32 [[MUL_4_2]], [[ADD_3_2]]
; CHECK-NEXT:    [[MUL_5_2:%.*]] = mul i32 [[DOTPRE10]], 3
; CHECK-NEXT:    [[ADD_5_2:%.*]] = add i32 [[MUL_5_2]], [[ADD_4_2]]
; CHECK-NEXT:    [[MUL_6_2:%.*]] = mul i32 [[DOTPRE11]], 3
; CHECK-NEXT:    [[ADD_6_2:%.*]] = add i32 [[MUL_6_2]], [[ADD_5_2]]
; CHECK-NEXT:    [[MUL_7_2:%.*]] = mul i32 [[DOTPRE12]], 3
; CHECK-NEXT:    [[ADD_7_2:%.*]] = add i32 [[MUL_7_2]], [[ADD_6_2]]
; CHECK-NEXT:    [[MUL_8_2:%.*]] = mul i32 [[DOTPRE13]], 3
; CHECK-NEXT:    [[ADD_8_2:%.*]] = add i32 [[MUL_8_2]], [[ADD_7_2]]
; CHECK-NEXT:    [[MUL_9_2:%.*]] = mul i32 [[DOTPRE14]], 3
; CHECK-NEXT:    [[ADD_9_2:%.*]] = add i32 [[MUL_9_2]], [[ADD_8_2]]
; CHECK-NEXT:    [[MUL_10_2:%.*]] = mul i32 [[DOTPRE15]], 3
; CHECK-NEXT:    [[ADD_10_2:%.*]] = add i32 [[MUL_10_2]], [[ADD_9_2]]
; CHECK-NEXT:    [[MUL_11_2:%.*]] = mul i32 [[DOTPRE16]], 3
; CHECK-NEXT:    [[ADD_11_2:%.*]] = add i32 [[MUL_11_2]], [[ADD_10_2]]
; CHECK-NEXT:    [[MUL_12_2:%.*]] = mul i32 [[DOTPRE17]], 3
; CHECK-NEXT:    [[ADD_12_2:%.*]] = add i32 [[MUL_12_2]], [[ADD_11_2]]
; CHECK-NEXT:    [[MUL_13_2:%.*]] = mul i32 [[DOTPRE18]], 3
; CHECK-NEXT:    [[ADD_13_2:%.*]] = add i32 [[MUL_13_2]], [[ADD_12_2]]
; CHECK-NEXT:    [[MUL_14_2:%.*]] = mul i32 [[DOTPRE19]], 3
; CHECK-NEXT:    [[ADD_14_2:%.*]] = add i32 [[MUL_14_2]], [[ADD_13_2]]
; CHECK-NEXT:    [[MUL_15_2:%.*]] = mul i32 [[DOTPRE20]], 3
; CHECK-NEXT:    [[ADD_15_2:%.*]] = add i32 [[MUL_15_2]], [[ADD_14_2]]
; CHECK-NEXT:    [[MUL_16_2:%.*]] = mul i32 [[DOTPRE21]], 3
; CHECK-NEXT:    [[ADD_16_2:%.*]] = add i32 [[MUL_16_2]], [[ADD_15_2]]
; CHECK-NEXT:    [[MUL_17_2:%.*]] = mul i32 [[DOTPRE22]], 3
; CHECK-NEXT:    [[ADD_17_2:%.*]] = add i32 [[MUL_17_2]], [[ADD_16_2]]
; CHECK-NEXT:    [[MUL_18_2:%.*]] = mul i32 [[DOTPRE23]], 3
; CHECK-NEXT:    [[ADD_18_2:%.*]] = add i32 [[MUL_18_2]], [[ADD_17_2]]
; CHECK-NEXT:    [[MUL_19_2:%.*]] = mul i32 [[DOTPRE24]], 3
; CHECK-NEXT:    [[ADD_19_2:%.*]] = add i32 [[MUL_19_2]], [[ADD_18_2]]
; CHECK-NEXT:    [[MUL_20_2:%.*]] = mul i32 [[DOTPRE25]], 3
; CHECK-NEXT:    [[ADD_20_2:%.*]] = add i32 [[MUL_20_2]], [[ADD_19_2]]
; CHECK-NEXT:    [[MUL_21_2:%.*]] = mul i32 [[DOTPRE26]], 3
; CHECK-NEXT:    [[ADD_21_2:%.*]] = add i32 [[MUL_21_2]], [[ADD_20_2]]
; CHECK-NEXT:    [[MUL_22_2:%.*]] = mul i32 [[DOTPRE27]], 3
; CHECK-NEXT:    [[ADD_22_2:%.*]] = add i32 [[MUL_22_2]], [[ADD_21_2]]
; CHECK-NEXT:    [[MUL_23_2:%.*]] = mul i32 [[DOTPRE28]], 3
; CHECK-NEXT:    [[ADD_23_2:%.*]] = add i32 [[MUL_23_2]], [[ADD_22_2]]
; CHECK-NEXT:    [[MUL_24_2:%.*]] = mul i32 [[DOTPRE29]], 3
; CHECK-NEXT:    [[ADD_24_2:%.*]] = add i32 [[MUL_24_2]], [[ADD_23_2]]
; CHECK-NEXT:    [[MUL_25_2:%.*]] = mul i32 [[DOTPRE30]], 3
; CHECK-NEXT:    [[ADD_25_2:%.*]] = add i32 [[MUL_25_2]], [[ADD_24_2]]
; CHECK-NEXT:    [[MUL_26_2:%.*]] = mul i32 [[DOTPRE31]], 3
; CHECK-NEXT:    [[ADD_26_2:%.*]] = add i32 [[MUL_26_2]], [[ADD_25_2]]
; CHECK-NEXT:    [[MUL_27_2:%.*]] = mul i32 [[DOTPRE32]], 3
; CHECK-NEXT:    [[ADD_27_2:%.*]] = add i32 [[MUL_27_2]], [[ADD_26_2]]
; CHECK-NEXT:    [[MUL_28_2:%.*]] = mul i32 [[DOTPRE33]], 3
; CHECK-NEXT:    [[ADD_28_2:%.*]] = add i32 [[MUL_28_2]], [[ADD_27_2]]
; CHECK-NEXT:    [[MUL_29_2:%.*]] = mul i32 [[DOTPRE34]], 3
; CHECK-NEXT:    [[ADD_29_2:%.*]] = add i32 [[MUL_29_2]], [[ADD_28_2]]
; CHECK-NEXT:    [[MUL_30_2:%.*]] = mul i32 [[DOTPRE35]], 3
; CHECK-NEXT:    [[ADD_30_2:%.*]] = add i32 [[MUL_30_2]], [[ADD_29_2]]
; CHECK-NEXT:    [[MUL_31_2:%.*]] = mul i32 [[DOTPRE36]], 3
; CHECK-NEXT:    [[ADD_31_2:%.*]] = add i32 [[MUL_31_2]], [[ADD_30_2]]
; CHECK-NEXT:    ret i32 [[ADD_31_2]]
;
entry:
  call void @populate(ptr noundef @ARR)
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %j.0 = phi i32 [ 1, %entry ], [ %inc6, %for.inc5 ]
  %sum.0 = phi i32 [ 0, %entry ], [ %sum.1, %for.inc5 ]
  %cmp = icmp slt i32 %j.0, 4
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  br label %for.end7

for.body:                                         ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %sum.1 = phi i32 [ %sum.0, %for.body ], [ %add, %for.inc ]
  %i.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %i.0, 32
  br i1 %cmp2, label %for.body4, label %for.cond.cleanup3

for.cond.cleanup3:                                ; preds = %for.cond1
  br label %for.end

for.body4:                                        ; preds = %for.cond1
  %idx.ext = sext i32 %i.0 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr inbounds i32, ptr getelementptr inbounds ([100 x i32], ptr @ARR, i64 0, i64 99), i64 %idx.neg
  %0 = load i32, ptr %add.ptr, align 4, !tbaa !3
  %mul = mul i32 %j.0, %0
  %add = add i32 %sum.1, %mul
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %inc = add nsw i32 %i.0, 1
  br label %for.cond1, !llvm.loop !7

for.end:                                          ; preds = %for.cond.cleanup3
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %inc6 = add nsw i32 %j.0, 1
  br label %for.cond, !llvm.loop !9

for.end7:                                         ; preds = %for.cond.cleanup
  ret i32 %sum.0
}

declare dso_local void @populate(ptr noundef) #1

attributes #0 = { nounwind "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="z10" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="z10" }
attributes #2 = { argmemonly nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"frame-pointer", i32 2}
!2 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project.git 0bfef0669075f229fd325d8c8521c9adfb453f83)"}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.mustprogress"}
!9 = distinct !{!9, !8}
