; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S --passes=mergeicmps,expand-memcmp -mtriple=i686-unknown-linux < %s | FileCheck %s --check-prefix=X86
; RUN: opt -S --passes=mergeicmps,expand-memcmp -mtriple=x86_64-unknown-linux < %s | FileCheck %s --check-prefix=X64

; This tests interaction between MergeICmp and ExpandMemCmp.

%"struct.std::pair" = type { i32, i32 }

define zeroext i1 @opeq1(
; X86-LABEL: define zeroext i1 @opeq1(
; X86-SAME: ptr nocapture readonly dereferenceable(8) [[A:%.*]], ptr nocapture readonly dereferenceable(8) [[B:%.*]]) local_unnamed_addr {
; X86-NEXT:  "entry+land.rhs.i":
; X86-NEXT:    [[TMP0:%.*]] = load i32, ptr [[A]], align 1
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[B]], align 1
; X86-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP0]], [[TMP1]]
; X86-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i64 4
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = xor i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    [[TMP8:%.*]] = or i32 [[TMP2]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = icmp ne i32 [[TMP8]], 0
; X86-NEXT:    [[TMP10:%.*]] = zext i1 [[TMP9]] to i32
; X86-NEXT:    [[TMP11:%.*]] = icmp eq i32 [[TMP10]], 0
; X86-NEXT:    br label [[OPEQ1_EXIT:%.*]]
; X86:       opeq1.exit:
; X86-NEXT:    ret i1 [[TMP11]]
;
; X64-LABEL: define zeroext i1 @opeq1(
; X64-SAME: ptr nocapture readonly dereferenceable(8) [[A:%.*]], ptr nocapture readonly dereferenceable(8) [[B:%.*]]) local_unnamed_addr {
; X64-NEXT:  "entry+land.rhs.i":
; X64-NEXT:    [[TMP0:%.*]] = load i64, ptr [[A]], align 1
; X64-NEXT:    [[TMP1:%.*]] = load i64, ptr [[B]], align 1
; X64-NEXT:    [[TMP2:%.*]] = icmp ne i64 [[TMP0]], [[TMP1]]
; X64-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X64-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP3]], 0
; X64-NEXT:    br label [[OPEQ1_EXIT:%.*]]
; X64:       opeq1.exit:
; X64-NEXT:    ret i1 [[TMP4]]
;
  %"struct.std::pair"* nocapture readonly dereferenceable(8) %a,
  %"struct.std::pair"* nocapture readonly dereferenceable(8) %b) local_unnamed_addr #0 {
entry:
  %first.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %a, i64 0, i32 0
  %0 = load i32, i32* %first.i, align 4
  %first1.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %b, i64 0, i32 0
  %1 = load i32, i32* %first1.i, align 4
  %cmp.i = icmp eq i32 %0, %1
  br i1 %cmp.i, label %land.rhs.i, label %opeq1.exit

land.rhs.i:
  %second.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %a, i64 0, i32 1
  %2 = load i32, i32* %second.i, align 4
  %second2.i = getelementptr inbounds %"struct.std::pair", %"struct.std::pair"* %b, i64 0, i32 1
  %3 = load i32, i32* %second2.i, align 4
  %cmp3.i = icmp eq i32 %2, %3
  br label %opeq1.exit

opeq1.exit:
  %4 = phi i1 [ false, %entry ], [ %cmp3.i, %land.rhs.i ]
  ret i1 %4
}
