; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=expand-memcmp  < %s -mtriple=aarch64-unknown-unknown | FileCheck %s

@.str = private constant [513 x i8] c"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\00", align 1

declare dso_local i32 @memcmp(ptr, ptr, i64)

define i32 @length0(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length0(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    ret i32 0
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 0) nounwind
  ret i32 %m
  }

define i1 @length0_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length0_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 0) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length0_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length0_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 0) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length2(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length2(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    ret i32 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  ret i32 %m
}

define i32 @length2_const(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length2_const(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = zext i16 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = sub i32 [[TMP3]], 12594
; CHECK-NEXT:    ret i32 [[TMP4]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 2) nounwind
  ret i32 %m
}

define i1 @length2_gt_const(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length2_gt_const(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = zext i16 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = sub i32 [[TMP3]], 12594
; CHECK-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP4]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 2) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length2_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length2_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length2_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[C:%.*]] = icmp slt i32 [[TMP7]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length2_gt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length2_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP7]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length2_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; CHECK-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; CHECK-NEXT:    ret i1 [[TMP2]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 2) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_nobuiltin_attr(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length2_eq_nobuiltin_attr(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR3:[0-9]+]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind nobuiltin
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length3(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length3(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i24, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i24, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i24 [[TMP1]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = zext i24 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ugt i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ult i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP9:%.*]] = zext i1 [[TMP7]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = zext i1 [[TMP8]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP9]], [[TMP10]]
; CHECK-NEXT:    ret i32 [[TMP11]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 3) nounwind
  ret i32 %m
}

define i1 @length3_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length3_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; CHECK-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; CHECK-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 3) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length4(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length4(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  ret i32 %m
}

define i1 @length4_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length4_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; CHECK-NEXT:    ret i1 [[TMP3]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length4_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length4_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    ret i1 [[TMP5]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length4_lt_32(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length4_lt_32(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = zext i1 [[TMP5]] to i32
; CHECK-NEXT:    ret i32 [[TMP6]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  %c = lshr i32 %m, 31
  ret i32 %c
}

define i1 @length4_gt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length4_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    ret i1 [[TMP5]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length4_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length4_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; CHECK-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 4) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length5(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length5(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i40, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i40, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i40 [[TMP1]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = zext i40 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ugt i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ult i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP9:%.*]] = zext i1 [[TMP7]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = zext i1 [[TMP8]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP9]], [[TMP10]]
; CHECK-NEXT:    ret i32 [[TMP11]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 5) nounwind
  ret i32 %m
}

define i1 @length5_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length5_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; CHECK-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 5) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length5_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length5_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i40, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i40, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i40 [[TMP1]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = zext i40 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 5) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length6(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length6(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i48, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i48, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i48 [[TMP1]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = zext i48 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ugt i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ult i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP9:%.*]] = zext i1 [[TMP7]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = zext i1 [[TMP8]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = sub i32 [[TMP9]], [[TMP10]]
; CHECK-NEXT:    ret i32 [[TMP11]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 6) nounwind
  ret i32 %m
}

define i32 @length6_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length6_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i48, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i48, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i48 [[TMP1]] to i64
; CHECK-NEXT:    [[TMP4:%.*]] = zext i48 [[TMP2]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; CHECK-NEXT:    ret i32 [[TMP8]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 6) nounwind
  %r = lshr i32 %m, 31
  ret i32 %r
}

define i32 @length7(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length7(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 7) nounwind
  ret i32 %m
}

define i1 @length7_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length7_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 7) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length7_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length7_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    ret i1 [[TMP10]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 7) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length8(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length8(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i64 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 8) nounwind
  ret i32 %m
}

define i1 @length8_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length8_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ne i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 8) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length8_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length8_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ne i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; CHECK-NEXT:    ret i1 [[TMP2]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 8) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length9(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length9(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[TMP5:%.*]], [[TMP6:%.*]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; CHECK-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; CHECK-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br label [[ENDBLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 9) nounwind
  ret i32 %m
}

define i1 @length9_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length9_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = xor i64 [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = or i64 [[TMP3]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i64 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP13]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 9) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length10(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length10(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP14:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP15:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP10]])
; CHECK-NEXT:    [[TMP13:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP11]])
; CHECK-NEXT:    [[TMP14]] = zext i16 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP15]] = zext i16 [[TMP13]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[TMP14]], [[TMP15]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 10) nounwind
  ret i32 %m
}

define i1 @length10_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length10_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i16, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext i16 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext i16 [[TMP7]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = xor i64 [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = or i64 [[TMP3]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i64 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP13]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 10) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length11(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length11(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 11) nounwind
  ret i32 %m
}

define i1 @length11_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length11_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i64 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 11) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length12_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length12_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = zext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext i32 [[TMP7]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = xor i64 [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = or i64 [[TMP3]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i64 [[TMP11]], 0
; CHECK-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; CHECK-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 12) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length12(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length12(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP14:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP15:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; CHECK-NEXT:    [[TMP14]] = zext i32 [[TMP12]] to i64
; CHECK-NEXT:    [[TMP15]] = zext i32 [[TMP13]] to i64
; CHECK-NEXT:    [[TMP16:%.*]] = icmp eq i64 [[TMP14]], [[TMP15]]
; CHECK-NEXT:    br i1 [[TMP16]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 12) nounwind
  ret i32 %m
}

define i1 @length13_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length13_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 5
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 5
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i64 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 13) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length14_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length14_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i64 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 14) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length15(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length15(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 7
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 15) nounwind
  ret i32 %m
}

define i1 @length15_lt(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length15_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 7
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 15) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length15_const(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length15_const(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP4:%.*]], [[LOADBB]] ], [ [[TMP8:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ 3544952156018063160, [[LOADBB]] ], [ 4051322327650219061, [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i64 [[TMP4]], 3544952156018063160
; CHECK-NEXT:    br i1 [[TMP5]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 7
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8]] = call i64 @llvm.bswap.i64(i64 [[TMP7]])
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i64 [[TMP8]], 4051322327650219061
; CHECK-NEXT:    br i1 [[TMP9]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 15) nounwind
  ret i32 %m
}

define i1 @length15_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length15_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 7
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i64 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 15) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length15_gt_const(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @length15_gt_const(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP4:%.*]], [[LOADBB]] ], [ [[TMP8:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ 3544952156018063160, [[LOADBB]] ], [ 4051322327650219061, [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq i64 [[TMP4]], 3544952156018063160
; CHECK-NEXT:    br i1 [[TMP5]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 7
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8]] = call i64 @llvm.bswap.i64(i64 [[TMP7]])
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq i64 [[TMP8]], 4051322327650219061
; CHECK-NEXT:    br i1 [[TMP9]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[C:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i64 15) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}


define i32 @length16(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length16(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 16) nounwind
  ret i32 %m
}

define i1 @length16_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length16_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = icmp ne i64 [[TMP9]], 0
; CHECK-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; CHECK-NEXT:    ret i1 [[TMP10]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 16) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length16_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 16) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length16_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 16) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length16_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ne i64 [[TMP6]], 0
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP8]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 16) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}


define i32 @length24(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length24(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 24) nounwind
  ret i32 %m
}

define i1 @length24_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length24_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP15:%.*]] = or i64 [[TMP14]], [[TMP13]]
; CHECK-NEXT:    [[TMP16:%.*]] = icmp ne i64 [[TMP15]], 0
; CHECK-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP17]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 24) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length24_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 24) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length24_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 24) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length24_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP10:%.*]] = or i64 [[TMP9]], [[TMP8]]
; CHECK-NEXT:    [[TMP11:%.*]] = icmp ne i64 [[TMP10]], 0
; CHECK-NEXT:    [[TMP12:%.*]] = zext i1 [[TMP11]] to i32
; CHECK-NEXT:    ret i1 [[TMP11]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 24) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length31(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length31(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 23
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 31) nounwind
  ret i32 %m
}

define i1 @length31_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length31_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 23
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP20:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP21:%.*]] = or i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i64 [[TMP21]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP23]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 31) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length31_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 23
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 31) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length31_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 23
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 31) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; CHECK-LABEL: define i1 @length31_eq_prefer128(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 23
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP20:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP21:%.*]] = or i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i64 [[TMP21]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP23]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 31) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length31_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 23
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 3474870397276861491
; CHECK-NEXT:    [[TMP12:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP13:%.*]] = or i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[TMP14:%.*]] = or i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i64 [[TMP14]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; CHECK-NEXT:    ret i1 [[TMP15]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 31) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length32(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length32(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 32) nounwind
  ret i32 %m
}


define i1 @length32_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length32_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP20:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP21:%.*]] = or i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i64 [[TMP21]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP23]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length32_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 32) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length32_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 32) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; CHECK-LABEL: define i1 @length32_eq_prefer128(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP20:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP21:%.*]] = or i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i64 [[TMP21]], 0
; CHECK-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP23]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length32_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 3544395820347831604
; CHECK-NEXT:    [[TMP12:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP13:%.*]] = or i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[TMP14:%.*]] = or i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = icmp ne i64 [[TMP14]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; CHECK-NEXT:    ret i1 [[TMP15]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 32) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length48(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length48(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB5]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 48) nounwind
  ret i32 %m
}

define i1 @length48_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length48_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP21:%.*]] = load i64, ptr [[TMP19]], align 1
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP20]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP21]], [[TMP22]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = xor i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP30:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP31:%.*]] = or i64 [[TMP23]], [[TMP28]]
; CHECK-NEXT:    [[TMP32:%.*]] = or i64 [[TMP29]], [[TMP30]]
; CHECK-NEXT:    [[TMP33:%.*]] = or i64 [[TMP32]], [[TMP31]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i64 [[TMP33]], 0
; CHECK-NEXT:    [[TMP35:%.*]] = zext i1 [[TMP34]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP35]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 48) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length48_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB5]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 48) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length48_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB5]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 48) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; CHECK-LABEL: define i1 @length48_eq_prefer128(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP21:%.*]] = load i64, ptr [[TMP19]], align 1
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP20]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP21]], [[TMP22]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = xor i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP30:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP31:%.*]] = or i64 [[TMP23]], [[TMP28]]
; CHECK-NEXT:    [[TMP32:%.*]] = or i64 [[TMP29]], [[TMP30]]
; CHECK-NEXT:    [[TMP33:%.*]] = or i64 [[TMP32]], [[TMP31]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i64 [[TMP33]], 0
; CHECK-NEXT:    [[TMP35:%.*]] = zext i1 [[TMP34]] to i32
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP35]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 48) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length48_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 3544395820347831604
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[TMP12]], align 1
; CHECK-NEXT:    [[TMP14:%.*]] = xor i64 [[TMP13]], 4123106164818064178
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = xor i64 [[TMP16]], 3978425819141910832
; CHECK-NEXT:    [[TMP18:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP19:%.*]] = or i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[TMP20:%.*]] = or i64 [[TMP14]], [[TMP17]]
; CHECK-NEXT:    [[TMP21:%.*]] = or i64 [[TMP18]], [[TMP19]]
; CHECK-NEXT:    [[TMP22:%.*]] = or i64 [[TMP21]], [[TMP20]]
; CHECK-NEXT:    [[TMP23:%.*]] = icmp ne i64 [[TMP22]], 0
; CHECK-NEXT:    [[TMP24:%.*]] = zext i1 [[TMP23]] to i32
; CHECK-NEXT:    ret i1 [[TMP23]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 48) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length63(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length63(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 55
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 55
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 63) nounwind
  ret i32 %m
}

define i1 @length63_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length63_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP21:%.*]] = load i64, ptr [[TMP19]], align 1
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP20]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP21]], [[TMP22]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = xor i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33:%.*]] = xor i64 [[TMP31]], [[TMP32]]
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr i8, ptr [[X]], i64 55
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr [[Y]], i64 55
; CHECK-NEXT:    [[TMP36:%.*]] = load i64, ptr [[TMP34]], align 1
; CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[TMP35]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = xor i64 [[TMP36]], [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP40:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP41:%.*]] = or i64 [[TMP23]], [[TMP28]]
; CHECK-NEXT:    [[TMP42:%.*]] = or i64 [[TMP33]], [[TMP38]]
; CHECK-NEXT:    [[TMP43:%.*]] = or i64 [[TMP39]], [[TMP40]]
; CHECK-NEXT:    [[TMP44:%.*]] = or i64 [[TMP41]], [[TMP42]]
; CHECK-NEXT:    [[TMP45:%.*]] = or i64 [[TMP43]], [[TMP44]]
; CHECK-NEXT:    [[TMP46:%.*]] = icmp ne i64 [[TMP45]], 0
; CHECK-NEXT:    [[TMP47:%.*]] = zext i1 [[TMP46]] to i32
; CHECK-NEXT:    ret i1 [[TMP46]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 63) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length63_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 55
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 55
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 63) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length63_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 55
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 55
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 63) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length63_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 3544395820347831604
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[TMP12]], align 1
; CHECK-NEXT:    [[TMP14:%.*]] = xor i64 [[TMP13]], 4123106164818064178
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = xor i64 [[TMP16]], 3978425819141910832
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[TMP18]], align 1
; CHECK-NEXT:    [[TMP20:%.*]] = xor i64 [[TMP19]], 3833745473465760056
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[X]], i64 55
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP21]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP22]], 3616724998069630517
; CHECK-NEXT:    [[TMP24:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP25:%.*]] = or i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[TMP26:%.*]] = or i64 [[TMP14]], [[TMP17]]
; CHECK-NEXT:    [[TMP27:%.*]] = or i64 [[TMP20]], [[TMP23]]
; CHECK-NEXT:    [[TMP28:%.*]] = or i64 [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP29:%.*]] = or i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = or i64 [[TMP28]], [[TMP29]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i64 [[TMP30]], 0
; CHECK-NEXT:    [[TMP32:%.*]] = zext i1 [[TMP31]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP32]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 63) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length64(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length64(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 56
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 56
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 64) nounwind
  ret i32 %m
}

define i1 @length64_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length64_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP5]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12:%.*]] = load i64, ptr [[TMP10]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = xor i64 [[TMP11]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP14]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = xor i64 [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP21:%.*]] = load i64, ptr [[TMP19]], align 1
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP20]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP21]], [[TMP22]]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, ptr [[TMP24]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP28:%.*]] = xor i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33:%.*]] = xor i64 [[TMP31]], [[TMP32]]
; CHECK-NEXT:    [[TMP34:%.*]] = getelementptr i8, ptr [[X]], i64 56
; CHECK-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr [[Y]], i64 56
; CHECK-NEXT:    [[TMP36:%.*]] = load i64, ptr [[TMP34]], align 1
; CHECK-NEXT:    [[TMP37:%.*]] = load i64, ptr [[TMP35]], align 1
; CHECK-NEXT:    [[TMP38:%.*]] = xor i64 [[TMP36]], [[TMP37]]
; CHECK-NEXT:    [[TMP39:%.*]] = or i64 [[TMP3]], [[TMP8]]
; CHECK-NEXT:    [[TMP40:%.*]] = or i64 [[TMP13]], [[TMP18]]
; CHECK-NEXT:    [[TMP41:%.*]] = or i64 [[TMP23]], [[TMP28]]
; CHECK-NEXT:    [[TMP42:%.*]] = or i64 [[TMP33]], [[TMP38]]
; CHECK-NEXT:    [[TMP43:%.*]] = or i64 [[TMP39]], [[TMP40]]
; CHECK-NEXT:    [[TMP44:%.*]] = or i64 [[TMP41]], [[TMP42]]
; CHECK-NEXT:    [[TMP45:%.*]] = or i64 [[TMP43]], [[TMP44]]
; CHECK-NEXT:    [[TMP46:%.*]] = icmp ne i64 [[TMP45]], 0
; CHECK-NEXT:    [[TMP47:%.*]] = zext i1 [[TMP46]] to i32
; CHECK-NEXT:    ret i1 [[TMP46]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 64) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length64_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 56
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 56
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 64) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length64_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    br label [[LOADBB:%.*]]
; CHECK:       res_block:
; CHECK-NEXT:    [[PHI_SRC1:%.*]] = phi i64 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ], [ [[TMP33:%.*]], [[LOADBB4:%.*]] ], [ [[TMP40:%.*]], [[LOADBB5:%.*]] ], [ [[TMP47:%.*]], [[LOADBB6:%.*]] ], [ [[TMP54:%.*]], [[LOADBB7:%.*]] ]
; CHECK-NEXT:    [[PHI_SRC2:%.*]] = phi i64 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ], [ [[TMP34:%.*]], [[LOADBB4]] ], [ [[TMP41:%.*]], [[LOADBB5]] ], [ [[TMP48:%.*]], [[LOADBB6]] ], [ [[TMP55:%.*]], [[LOADBB7]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i64 [[PHI_SRC1]], [[PHI_SRC2]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; CHECK-NEXT:    br label [[ENDBLOCK:%.*]]
; CHECK:       loadbb:
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[Y]], align 1
; CHECK-NEXT:    [[TMP5]] = call i64 @llvm.bswap.i64(i64 [[TMP3]])
; CHECK-NEXT:    [[TMP6]] = call i64 @llvm.bswap.i64(i64 [[TMP4]])
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; CHECK:       loadbb1:
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP8]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP12]] = call i64 @llvm.bswap.i64(i64 [[TMP10]])
; CHECK-NEXT:    [[TMP13]] = call i64 @llvm.bswap.i64(i64 [[TMP11]])
; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; CHECK:       loadbb2:
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; CHECK-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP18:%.*]] = load i64, ptr [[TMP16]], align 1
; CHECK-NEXT:    [[TMP19]] = call i64 @llvm.bswap.i64(i64 [[TMP17]])
; CHECK-NEXT:    [[TMP20]] = call i64 @llvm.bswap.i64(i64 [[TMP18]])
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP19]], [[TMP20]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; CHECK:       loadbb3:
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 24
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, ptr [[TMP22]], align 1
; CHECK-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP23]], align 1
; CHECK-NEXT:    [[TMP26]] = call i64 @llvm.bswap.i64(i64 [[TMP24]])
; CHECK-NEXT:    [[TMP27]] = call i64 @llvm.bswap.i64(i64 [[TMP25]])
; CHECK-NEXT:    [[TMP28:%.*]] = icmp eq i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    br i1 [[TMP28]], label [[LOADBB4]], label [[RES_BLOCK]]
; CHECK:       loadbb4:
; CHECK-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP30:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; CHECK-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP29]], align 1
; CHECK-NEXT:    [[TMP32:%.*]] = load i64, ptr [[TMP30]], align 1
; CHECK-NEXT:    [[TMP33]] = call i64 @llvm.bswap.i64(i64 [[TMP31]])
; CHECK-NEXT:    [[TMP34]] = call i64 @llvm.bswap.i64(i64 [[TMP32]])
; CHECK-NEXT:    [[TMP35:%.*]] = icmp eq i64 [[TMP33]], [[TMP34]]
; CHECK-NEXT:    br i1 [[TMP35]], label [[LOADBB5]], label [[RES_BLOCK]]
; CHECK:       loadbb5:
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[Y]], i64 40
; CHECK-NEXT:    [[TMP38:%.*]] = load i64, ptr [[TMP36]], align 1
; CHECK-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP37]], align 1
; CHECK-NEXT:    [[TMP40]] = call i64 @llvm.bswap.i64(i64 [[TMP38]])
; CHECK-NEXT:    [[TMP41]] = call i64 @llvm.bswap.i64(i64 [[TMP39]])
; CHECK-NEXT:    [[TMP42:%.*]] = icmp eq i64 [[TMP40]], [[TMP41]]
; CHECK-NEXT:    br i1 [[TMP42]], label [[LOADBB6]], label [[RES_BLOCK]]
; CHECK:       loadbb6:
; CHECK-NEXT:    [[TMP43:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; CHECK-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP43]], align 1
; CHECK-NEXT:    [[TMP46:%.*]] = load i64, ptr [[TMP44]], align 1
; CHECK-NEXT:    [[TMP47]] = call i64 @llvm.bswap.i64(i64 [[TMP45]])
; CHECK-NEXT:    [[TMP48]] = call i64 @llvm.bswap.i64(i64 [[TMP46]])
; CHECK-NEXT:    [[TMP49:%.*]] = icmp eq i64 [[TMP47]], [[TMP48]]
; CHECK-NEXT:    br i1 [[TMP49]], label [[LOADBB7]], label [[RES_BLOCK]]
; CHECK:       loadbb7:
; CHECK-NEXT:    [[TMP50:%.*]] = getelementptr i8, ptr [[X]], i64 56
; CHECK-NEXT:    [[TMP51:%.*]] = getelementptr i8, ptr [[Y]], i64 56
; CHECK-NEXT:    [[TMP52:%.*]] = load i64, ptr [[TMP50]], align 1
; CHECK-NEXT:    [[TMP53:%.*]] = load i64, ptr [[TMP51]], align 1
; CHECK-NEXT:    [[TMP54]] = call i64 @llvm.bswap.i64(i64 [[TMP52]])
; CHECK-NEXT:    [[TMP55]] = call i64 @llvm.bswap.i64(i64 [[TMP53]])
; CHECK-NEXT:    [[TMP56:%.*]] = icmp eq i64 [[TMP54]], [[TMP55]]
; CHECK-NEXT:    br i1 [[TMP56]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; CHECK:       endblock:
; CHECK-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB7]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 64) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length64_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[X]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i64 [[TMP1]], 3978425819141910832
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = xor i64 [[TMP4]], 3833745473465760056
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 16
; CHECK-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 3689065127958034230
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 24
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, ptr [[TMP9]], align 1
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 3544395820347831604
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[X]], i64 32
; CHECK-NEXT:    [[TMP13:%.*]] = load i64, ptr [[TMP12]], align 1
; CHECK-NEXT:    [[TMP14:%.*]] = xor i64 [[TMP13]], 4123106164818064178
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 40
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = xor i64 [[TMP16]], 3978425819141910832
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr [[X]], i64 48
; CHECK-NEXT:    [[TMP19:%.*]] = load i64, ptr [[TMP18]], align 1
; CHECK-NEXT:    [[TMP20:%.*]] = xor i64 [[TMP19]], 3833745473465760056
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[X]], i64 56
; CHECK-NEXT:    [[TMP22:%.*]] = load i64, ptr [[TMP21]], align 1
; CHECK-NEXT:    [[TMP23:%.*]] = xor i64 [[TMP22]], 3689065127958034230
; CHECK-NEXT:    [[TMP24:%.*]] = or i64 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    [[TMP25:%.*]] = or i64 [[TMP8]], [[TMP11]]
; CHECK-NEXT:    [[TMP26:%.*]] = or i64 [[TMP14]], [[TMP17]]
; CHECK-NEXT:    [[TMP27:%.*]] = or i64 [[TMP20]], [[TMP23]]
; CHECK-NEXT:    [[TMP28:%.*]] = or i64 [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP29:%.*]] = or i64 [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP30:%.*]] = or i64 [[TMP28]], [[TMP29]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i64 [[TMP30]], 0
; CHECK-NEXT:    [[TMP32:%.*]] = zext i1 [[TMP31]] to i32
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP32]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 64) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length96(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length96(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 96) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 96) nounwind
  ret i32 %m
}

define i1 @length96_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length96_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 96) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 96) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length96_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 96) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 96) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length96_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 96) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 96) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length96_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 96) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 96) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length127(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length127(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 127) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 127) nounwind
  ret i32 %m
}

define i1 @length127_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length127_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 127) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 127) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length127_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 127) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 127) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length127_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 127) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 127) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length127_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 127) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 127) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length128(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length128(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 128) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 128) nounwind
  ret i32 %m
}

define i1 @length128_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length128_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 128) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 128) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length128_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 128) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 128) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length128_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 128) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 128) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length128_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 128) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 128) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length192(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length192(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 192) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 192) nounwind
  ret i32 %m
}

define i1 @length192_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length192_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 192) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 192) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length192_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 192) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 192) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length192_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 192) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 192) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length192_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 192) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 192) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length255(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length255(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 255) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 255) nounwind
  ret i32 %m
}

define i1 @length255_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length255_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 255) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 255) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length255_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 255) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 255) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length255_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 255) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 255) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length255_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 255) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 255) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length256(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length256(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 256) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 256) nounwind
  ret i32 %m
}

define i1 @length256_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length256_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 256) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 256) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length256_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 256) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 256) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length256_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 256) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 256) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length256_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 256) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 256) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length384(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length384(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 384) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 384) nounwind
  ret i32 %m
}

define i1 @length384_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length384_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 384) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 384) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length384_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 384) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 384) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length384_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 384) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 384) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length384_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 384) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 384) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length511(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length511(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 511) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 511) nounwind
  ret i32 %m
}

define i1 @length511_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length511_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 511) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 511) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length511_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 511) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 511) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length511_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 511) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 511) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length511_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 511) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 511) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length512(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @length512(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 512) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 512) nounwind
  ret i32 %m
}

define i1 @length512_eq(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length512_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 512) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 512) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_lt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length512_lt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 512) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 512) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_gt(ptr %x, ptr %y) nounwind {
; CHECK-LABEL: define i1 @length512_gt(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 512) #[[ATTR0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 512) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_eq_const(ptr %X) nounwind {
; CHECK-LABEL: define i1 @length512_eq_const(
; CHECK-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 512) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 512) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @huge_length(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i32 @huge_length(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 9223372036854775807) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 9223372036854775807) nounwind
  ret i32 %m
}

define i1 @huge_length_eq(ptr %X, ptr %Y) nounwind {
; CHECK-LABEL: define i1 @huge_length_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 9223372036854775807) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 9223372036854775807) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @nonconst_length(ptr %X, ptr %Y, i64 %size) nounwind {
; CHECK-LABEL: define i32 @nonconst_length(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i64 [[SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 [[SIZE]]) #[[ATTR0]]
; CHECK-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 %size) nounwind
  ret i32 %m
}

define i1 @nonconst_length_eq(ptr %X, ptr %Y, i64 %size) nounwind {
; CHECK-LABEL: define i1 @nonconst_length_eq(
; CHECK-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i64 [[SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 [[SIZE]]) #[[ATTR0]]
; CHECK-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; CHECK-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 %size) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}
