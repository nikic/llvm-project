; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; NOTE: This is a copy of llvm/test/CodeGen/X86/memcmp.ll with more load pairs. Please keep it that way.
; RUN: opt -S -passes=expand-memcmp -max-loads-per-memcmp=4 -memcmp-num-loads-per-block=4 -mtriple=i686-unknown-unknown -mattr=cmov     < %s | FileCheck %s --check-prefixes=X86
; RUN: opt -S -passes=expand-memcmp -max-loads-per-memcmp=4 -memcmp-num-loads-per-block=4 -mtriple=i686-unknown-unknown -mattr=+sse     < %s | FileCheck %s --check-prefixes=X86-SSE1
; RUN: opt -S -passes=expand-memcmp -max-loads-per-memcmp=4 -memcmp-num-loads-per-block=4 -mtriple=i686-unknown-unknown -mattr=+sse2    < %s | FileCheck %s --check-prefixes=X86-SSE2
; RUN: opt -S -passes=expand-memcmp -max-loads-per-memcmp=4 -memcmp-num-loads-per-block=4 -mtriple=i686-unknown-unknown -mattr=+sse4.1  < %s | FileCheck %s --check-prefixes=X86-SSE41

; This tests codegen time inlining/optimization of memcmp
; rdar://6480398

@.str = private constant [513 x i8] c"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\00", align 1

declare dso_local i32 @memcmp(ptr, ptr, i32)

define i32 @length0(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length0(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X86-NEXT:    ret i32 0
;
; X86-SSE1-LABEL: define i32 @length0(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X86-SSE1-NEXT:    ret i32 0
;
; X86-SSE2-LABEL: define i32 @length0(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X86-SSE2-NEXT:    ret i32 0
;
; X86-SSE41-LABEL: define i32 @length0(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X86-SSE41-NEXT:    ret i32 0
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 0) nounwind
  ret i32 %m
  }

define i1 @length0_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length0_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    ret i1 true
;
; X86-SSE1-LABEL: define i1 @length0_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    ret i1 true
;
; X86-SSE2-LABEL: define i1 @length0_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    ret i1 true
;
; X86-SSE41-LABEL: define i1 @length0_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 0) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length0_lt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length0_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    ret i1 false
;
; X86-SSE1-LABEL: define i1 @length0_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    ret i1 false
;
; X86-SSE2-LABEL: define i1 @length0_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    ret i1 false
;
; X86-SSE41-LABEL: define i1 @length0_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 0) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length2(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length2(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    ret i32 [[TMP7]]
;
; X86-SSE1-LABEL: define i32 @length2(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE1-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE1-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    ret i32 [[TMP7]]
;
; X86-SSE2-LABEL: define i32 @length2(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    ret i32 [[TMP7]]
;
; X86-SSE41-LABEL: define i32 @length2(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE41-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    ret i32 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  ret i32 %m
}

define i1 @length2_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length2_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length2_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length2_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length2_lt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length2_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    [[C:%.*]] = icmp slt i32 [[TMP7]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length2_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE1-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE1-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp slt i32 [[TMP7]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp slt i32 [[TMP7]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length2_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE41-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp slt i32 [[TMP7]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length2_gt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length2_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP7]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length2_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE1-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE1-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP7]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP7]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length2_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE41-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp sgt i32 [[TMP7]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length2_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-NEXT:    ret i1 [[TMP2]]
;
; X86-SSE1-LABEL: define i1 @length2_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-SSE1-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP2]]
;
; X86-SSE2-LABEL: define i1 @length2_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP2]]
;
; X86-SSE41-LABEL: define i1 @length2_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-SSE41-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP2]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i32 2) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_nobuiltin_attr(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR4:[0-9]+]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR4:[0-9]+]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR4:[0-9]+]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR4:[0-9]+]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind nobuiltin
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length3(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length3(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br label [[ENDBLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length3(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE1-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br label [[ENDBLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length3(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br label [[ENDBLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length3(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE41-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br label [[ENDBLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 3) nounwind
  ret i32 %m
}

define i1 @length3_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length3_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE1-LABEL: define i1 @length3_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-SSE1-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-SSE1-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-SSE1-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-SSE1-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE2-LABEL: define i1 @length3_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-SSE2-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-SSE2-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-SSE2-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-SSE2-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE41-LABEL: define i1 @length3_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-SSE41-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-SSE41-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-SSE41-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-SSE41-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 3) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length4(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length4(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-NEXT:    ret i32 [[TMP9]]
;
; X86-SSE1-LABEL: define i32 @length4(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE1-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE1-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-SSE1-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-SSE1-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-SSE1-NEXT:    ret i32 [[TMP9]]
;
; X86-SSE2-LABEL: define i32 @length4(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-SSE2-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-SSE2-NEXT:    ret i32 [[TMP9]]
;
; X86-SSE41-LABEL: define i32 @length4(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE41-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE41-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-SSE41-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-SSE41-NEXT:    ret i32 [[TMP9]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  ret i32 %m
}

define i1 @length4_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length4_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-NEXT:    ret i1 [[TMP3]]
;
; X86-SSE1-LABEL: define i1 @length4_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP3]]
;
; X86-SSE2-LABEL: define i1 @length4_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP3]]
;
; X86-SSE41-LABEL: define i1 @length4_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP3]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length4_lt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length4_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE1-LABEL: define i1 @length4_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE1-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE2-LABEL: define i1 @length4_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE41-LABEL: define i1 @length4_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE41-NEXT:    ret i1 [[TMP5]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length4_gt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length4_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE1-LABEL: define i1 @length4_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE1-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE1-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE1-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE2-LABEL: define i1 @length4_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    ret i1 [[TMP5]]
;
; X86-SSE41-LABEL: define i1 @length4_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE41-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE41-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE41-NEXT:    ret i1 [[TMP5]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length4_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length4_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length4_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-SSE1-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length4_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length4_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-SSE41-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([513 x i8], ptr @.str, i32 0, i32 1), i32 4) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length5(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length5(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br label [[ENDBLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length5(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE1-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br label [[ENDBLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length5(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br label [[ENDBLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length5(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE41-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br label [[ENDBLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 5) nounwind
  ret i32 %m
}

define i1 @length5_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length5_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE1-LABEL: define i1 @length5_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-SSE1-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-SSE1-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-SSE1-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-SSE1-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE2-LABEL: define i1 @length5_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-SSE2-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-SSE2-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-SSE2-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE41-LABEL: define i1 @length5_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-SSE41-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-SSE41-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-SSE41-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-SSE41-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 5) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length5_lt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length5_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br label [[ENDBLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length5_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE1-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br label [[ENDBLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length5_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br label [[ENDBLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length5_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE41-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br label [[ENDBLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 5) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length7(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length7(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length7(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length7(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length7(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 7) nounwind
  ret i32 %m
}

define i1 @length7_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length7_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-NEXT:    ret i1 [[TMP10]]
;
; X86-SSE1-LABEL: define i1 @length7_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE1-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP10]]
;
; X86-SSE2-LABEL: define i1 @length7_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP10]]
;
; X86-SSE41-LABEL: define i1 @length7_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP10]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 7) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length7_lt(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length7_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length7_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length7_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length7_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 3
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 3
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 7) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i32 @length8(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length8(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length8(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length8(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length8(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 8) nounwind
  ret i32 %m
}

define i1 @length8_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length8_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length8_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE1-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length8_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length8_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 8) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length8_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length8_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE1-LABEL: define i1 @length8_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-SSE1-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-SSE1-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-SSE1-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-SSE1-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE2-LABEL: define i1 @length8_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE41-LABEL: define i1 @length8_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-SSE41-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 8) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length9_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length9_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i8, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = zext i8 [[TMP12]] to i32
; X86-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length9_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i8, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE1-NEXT:    [[TMP14:%.*]] = zext i8 [[TMP12]] to i32
; X86-SSE1-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE1-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE1-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE1-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length9_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i8, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = zext i8 [[TMP12]] to i32
; X86-SSE2-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE2-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE2-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length9_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i8, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE41-NEXT:    [[TMP14:%.*]] = zext i8 [[TMP12]] to i32
; X86-SSE41-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE41-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE41-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 9) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length10_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length10_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i16, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = zext i16 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = zext i16 [[TMP12]] to i32
; X86-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length10_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i16, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = zext i16 [[TMP11]] to i32
; X86-SSE1-NEXT:    [[TMP14:%.*]] = zext i16 [[TMP12]] to i32
; X86-SSE1-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE1-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE1-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE1-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length10_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i16, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i16 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = zext i16 [[TMP12]] to i32
; X86-SSE2-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE2-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE2-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length10_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i16, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = zext i16 [[TMP11]] to i32
; X86-SSE41-NEXT:    [[TMP14:%.*]] = zext i16 [[TMP12]] to i32
; X86-SSE41-NEXT:    [[TMP15:%.*]] = xor i32 [[TMP13]], [[TMP14]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP17:%.*]] = or i32 [[TMP16]], [[TMP15]]
; X86-SSE41-NEXT:    [[TMP18:%.*]] = icmp ne i32 [[TMP17]], 0
; X86-SSE41-NEXT:    [[TMP19:%.*]] = zext i1 [[TMP18]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP19]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 10) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length11_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length11_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 7
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length11_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 7
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE1-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE1-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length11_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 7
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE2-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length11_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 7
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 7
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE41-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 11) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length12_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length12_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-NEXT:    ret i1 [[TMP16]]
;
; X86-SSE1-LABEL: define i1 @length12_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE1-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE1-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP16]]
;
; X86-SSE2-LABEL: define i1 @length12_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE2-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP16]]
;
; X86-SSE41-LABEL: define i1 @length12_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = or i32 [[TMP14]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = icmp ne i32 [[TMP15]], 0
; X86-SSE41-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP16]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 12) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length12(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length12(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86:       loadbb2:
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length12(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb2:
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE1-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE1-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE1-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length12(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb2:
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE2-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE2-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE2-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length12(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb2:
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE41-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE41-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE41-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    br i1 [[TMP21]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB2]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 12) nounwind
  ret i32 %m
}

define i1 @length13_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length13_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP14]], align 1
; X86-NEXT:    [[TMP17:%.*]] = load i8, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = zext i8 [[TMP16]] to i32
; X86-NEXT:    [[TMP19:%.*]] = zext i8 [[TMP17]] to i32
; X86-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length13_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP14]], align 1
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i8, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = zext i8 [[TMP16]] to i32
; X86-SSE1-NEXT:    [[TMP19:%.*]] = zext i8 [[TMP17]] to i32
; X86-SSE1-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE1-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE1-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE1-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE1-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length13_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE2-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP14]], align 1
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i8, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = zext i8 [[TMP16]] to i32
; X86-SSE2-NEXT:    [[TMP19:%.*]] = zext i8 [[TMP17]] to i32
; X86-SSE2-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE2-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE2-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE2-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE2-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length13_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE41-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP14]], align 1
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i8, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = zext i8 [[TMP16]] to i32
; X86-SSE41-NEXT:    [[TMP19:%.*]] = zext i8 [[TMP17]] to i32
; X86-SSE41-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE41-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE41-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE41-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE41-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 13) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length14_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length14_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP16:%.*]] = load i16, ptr [[TMP14]], align 1
; X86-NEXT:    [[TMP17:%.*]] = load i16, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = zext i16 [[TMP16]] to i32
; X86-NEXT:    [[TMP19:%.*]] = zext i16 [[TMP17]] to i32
; X86-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length14_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP16:%.*]] = load i16, ptr [[TMP14]], align 1
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i16, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = zext i16 [[TMP16]] to i32
; X86-SSE1-NEXT:    [[TMP19:%.*]] = zext i16 [[TMP17]] to i32
; X86-SSE1-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE1-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE1-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE1-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE1-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length14_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE2-NEXT:    [[TMP16:%.*]] = load i16, ptr [[TMP14]], align 1
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i16, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = zext i16 [[TMP16]] to i32
; X86-SSE2-NEXT:    [[TMP19:%.*]] = zext i16 [[TMP17]] to i32
; X86-SSE2-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE2-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE2-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE2-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE2-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length14_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE41-NEXT:    [[TMP16:%.*]] = load i16, ptr [[TMP14]], align 1
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i16, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = zext i16 [[TMP16]] to i32
; X86-SSE41-NEXT:    [[TMP19:%.*]] = zext i16 [[TMP17]] to i32
; X86-SSE41-NEXT:    [[TMP20:%.*]] = xor i32 [[TMP18]], [[TMP19]]
; X86-SSE41-NEXT:    [[TMP21:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP22:%.*]] = or i32 [[TMP13]], [[TMP20]]
; X86-SSE41-NEXT:    [[TMP23:%.*]] = or i32 [[TMP21]], [[TMP22]]
; X86-SSE41-NEXT:    [[TMP24:%.*]] = icmp ne i32 [[TMP23]], 0
; X86-SSE41-NEXT:    [[TMP25:%.*]] = zext i1 [[TMP24]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP25]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 14) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length15_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @length15_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 11
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 11
; X86-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP23]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length15_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 11
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 11
; X86-SSE1-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-SSE1-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-SSE1-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-SSE1-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP23]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length15_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 11
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 11
; X86-SSE2-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-SSE2-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-SSE2-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-SSE2-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP23]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length15_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 11
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 11
; X86-SSE41-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-SSE41-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-SSE41-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-SSE41-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP23]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 15) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; PR33329 - https://bugs.llvm.org/show_bug.cgi?id=33329

define i32 @length16(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length16(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86:       loadbb2:
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86:       loadbb3:
; X86-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE1-LABEL: define i32 @length16(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb2:
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE1-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE1-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE1-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb3:
; X86-SSE1-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE1-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE1-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE1-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE1-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE1-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length16(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb2:
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE2-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE2-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE2-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb3:
; X86-SSE2-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE2-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE2-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE2-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE2-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE2-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE2-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE2-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE41-LABEL: define i32 @length16(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb2:
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE41-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE41-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE41-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb3:
; X86-SSE41-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE41-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE41-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE41-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE41-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE41-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE41-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE41-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 16) nounwind
  ret i32 %m
}

define i1 @length16_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length16_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %esi
; X86-NOSSE-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NOSSE-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NOSSE-NEXT:    movl (%edx), %esi
; X86-NOSSE-NEXT:    movl 4(%edx), %eax
; X86-NOSSE-NEXT:    xorl (%ecx), %esi
; X86-NOSSE-NEXT:    xorl 4(%ecx), %eax
; X86-NOSSE-NEXT:    orl %esi, %eax
; X86-NOSSE-NEXT:    movl 8(%edx), %esi
; X86-NOSSE-NEXT:    xorl 8(%ecx), %esi
; X86-NOSSE-NEXT:    movl 12(%edx), %edx
; X86-NOSSE-NEXT:    xorl 12(%ecx), %edx
; X86-NOSSE-NEXT:    orl %esi, %edx
; X86-NOSSE-NEXT:    orl %eax, %edx
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    popl %esi
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length16_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-NEXT:    ret i1 [[TMP22]]
;
; X86-SSE1-LABEL: define i1 @length16_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE1-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 1
; X86-SSE1-NEXT:    [[TMP13:%.*]] = xor i32 [[TMP11]], [[TMP12]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP16:%.*]] = load i32, ptr [[TMP14]], align 1
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = xor i32 [[TMP16]], [[TMP17]]
; X86-SSE1-NEXT:    [[TMP19:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE1-NEXT:    [[TMP20:%.*]] = or i32 [[TMP13]], [[TMP18]]
; X86-SSE1-NEXT:    [[TMP21:%.*]] = or i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    [[TMP22:%.*]] = icmp ne i32 [[TMP21]], 0
; X86-SSE1-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE1-NEXT:    ret i1 [[TMP22]]
;
; X86-SSE2-LABEL: define i1 @length16_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP3]]
;
; X86-SSE41-LABEL: define i1 @length16_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = icmp ne i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP3]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 16) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length16_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86:       loadbb2:
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86:       loadbb3:
; X86-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length16_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb2:
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE1-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE1-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE1-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb3:
; X86-SSE1-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE1-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE1-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE1-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE1-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE1-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length16_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb2:
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE2-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE2-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE2-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb3:
; X86-SSE2-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE2-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE2-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE2-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE2-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE2-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE2-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE2-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length16_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb2:
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE41-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE41-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE41-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb3:
; X86-SSE41-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE41-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE41-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE41-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE41-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE41-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE41-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE41-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[PHI_RES]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 16) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length16_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86:       loadbb2:
; X86-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86:       loadbb3:
; X86-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length16_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE1:       res_block:
; X86-SSE1-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE1-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE1-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE1-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE1-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE1:       loadbb:
; X86-SSE1-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE1-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE1-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE1-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE1-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE1:       loadbb1:
; X86-SSE1-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE1-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE1-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb2:
; X86-SSE1-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE1-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE1-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE1-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE1-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE1-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE1-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE1:       loadbb3:
; X86-SSE1-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE1-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE1-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE1-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE1-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE1-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE1-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE1:       endblock:
; X86-SSE1-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length16_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb2:
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE2-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE2-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE2-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE2:       loadbb3:
; X86-SSE2-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE2-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE2-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE2-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE2-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE2-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE2-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE2-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length16_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE41:       res_block:
; X86-SSE41-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ], [ [[TMP19:%.*]], [[LOADBB2:%.*]] ], [ [[TMP26:%.*]], [[LOADBB3:%.*]] ]
; X86-SSE41-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ], [ [[TMP20:%.*]], [[LOADBB2]] ], [ [[TMP27:%.*]], [[LOADBB3]] ]
; X86-SSE41-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE41-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE41-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE41:       loadbb:
; X86-SSE41-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE41-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE41-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE41:       loadbb1:
; X86-SSE41-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE41-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE41-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    br i1 [[TMP14]], label [[LOADBB2]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb2:
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP16]], align 1
; X86-SSE41-NEXT:    [[TMP19]] = call i32 @llvm.bswap.i32(i32 [[TMP17]])
; X86-SSE41-NEXT:    [[TMP20]] = call i32 @llvm.bswap.i32(i32 [[TMP18]])
; X86-SSE41-NEXT:    [[TMP21:%.*]] = icmp eq i32 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    br i1 [[TMP21]], label [[LOADBB3]], label [[RES_BLOCK]]
; X86-SSE41:       loadbb3:
; X86-SSE41-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE41-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[Y]], i64 12
; X86-SSE41-NEXT:    [[TMP24:%.*]] = load i32, ptr [[TMP22]], align 1
; X86-SSE41-NEXT:    [[TMP25:%.*]] = load i32, ptr [[TMP23]], align 1
; X86-SSE41-NEXT:    [[TMP26]] = call i32 @llvm.bswap.i32(i32 [[TMP24]])
; X86-SSE41-NEXT:    [[TMP27]] = call i32 @llvm.bswap.i32(i32 [[TMP25]])
; X86-SSE41-NEXT:    [[TMP28:%.*]] = icmp eq i32 [[TMP26]], [[TMP27]]
; X86-SSE41-NEXT:    br i1 [[TMP28]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE41:       endblock:
; X86-SSE41-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB3]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[PHI_RES]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 16) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length16_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %esi
; X86-NOSSE-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NOSSE-NEXT:    movl $858927408, %ecx # imm = 0x33323130
; X86-NOSSE-NEXT:    xorl (%eax), %ecx
; X86-NOSSE-NEXT:    movl $926299444, %edx # imm = 0x37363534
; X86-NOSSE-NEXT:    xorl 4(%eax), %edx
; X86-NOSSE-NEXT:    orl %ecx, %edx
; X86-NOSSE-NEXT:    movl $825243960, %ecx # imm = 0x31303938
; X86-NOSSE-NEXT:    xorl 8(%eax), %ecx
; X86-NOSSE-NEXT:    movl $892613426, %esi # imm = 0x35343332
; X86-NOSSE-NEXT:    xorl 12(%eax), %esi
; X86-NOSSE-NEXT:    orl %ecx, %esi
; X86-NOSSE-NEXT:    orl %edx, %esi
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    popl %esi
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length16_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP7]], 825243960
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP11:%.*]] = xor i32 [[TMP10]], 892613426
; X86-NEXT:    [[TMP12:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-NEXT:    [[TMP13:%.*]] = or i32 [[TMP8]], [[TMP11]]
; X86-NEXT:    [[TMP14:%.*]] = or i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    [[TMP15:%.*]] = icmp ne i32 [[TMP14]], 0
; X86-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length16_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE1-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-SSE1-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE1-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-SSE1-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-SSE1-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE1-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP6]], align 1
; X86-SSE1-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP7]], 825243960
; X86-SSE1-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 12
; X86-SSE1-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE1-NEXT:    [[TMP11:%.*]] = xor i32 [[TMP10]], 892613426
; X86-SSE1-NEXT:    [[TMP12:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-SSE1-NEXT:    [[TMP13:%.*]] = or i32 [[TMP8]], [[TMP11]]
; X86-SSE1-NEXT:    [[TMP14:%.*]] = or i32 [[TMP12]], [[TMP13]]
; X86-SSE1-NEXT:    [[TMP15:%.*]] = icmp ne i32 [[TMP14]], 0
; X86-SSE1-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length16_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length16_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = icmp ne i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 16) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; PR33914 - https://bugs.llvm.org/show_bug.cgi?id=33914

define i32 @length24(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length24(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5:[0-9]+]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length24(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5:[0-9]+]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length24(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5:[0-9]+]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length24(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5:[0-9]+]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 24) nounwind
  ret i32 %m
}

define i1 @length24_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length24_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $24
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length24_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length24_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length24_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length24_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 24) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length24_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length24_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length24_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length24_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 24) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length24_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length24_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length24_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length24_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 24) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length24_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $24
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length24_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 24) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length24_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 24) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length24_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 68051240286688436651889234231545575736
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE41-LABEL: define i1 @length24_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 68051240286688436651889234231545575736
; X86-SSE41-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 24) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length31(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length31(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length31(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length31(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length31(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 31) nounwind
  ret i32 %m
}

define i1 @length31_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length31_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $31
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length31_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length31_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length31_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 15
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length31_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 15
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 31) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length31_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length31_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length31_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length31_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 31) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length31_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length31_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length31_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length31_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 31) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; X86-NOSSE-LABEL: length31_eq_prefer128:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $31
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length31_eq_prefer128(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2:[0-9]+]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length31_eq_prefer128(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2:[0-9]+]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length31_eq_prefer128(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2:[0-9]+]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 15
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length31_eq_prefer128(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2:[0-9]+]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 15
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 31) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length31_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length31_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $31
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length31_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 31) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length31_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 31) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length31_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 64100044907875699958541276911416849973
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE41-LABEL: define i1 @length31_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 15
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 64100044907875699958541276911416849973
; X86-SSE41-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 31) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length32(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length32(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length32(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length32(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length32(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 32) nounwind
  ret i32 %m
}

; PR33325 - https://bugs.llvm.org/show_bug.cgi?id=33325

define i1 @length32_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length32_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $32
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length32_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length32_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length32_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length32_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length32_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length32_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length32_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length32_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 32) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length32_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length32_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length32_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length32_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 32) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; X86-NOSSE-LABEL: length32_eq_prefer128:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $32
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length32_eq_prefer128(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length32_eq_prefer128(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length32_eq_prefer128(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length32_eq_prefer128(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE41-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length32_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $32
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length32_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 32) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length32_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 32) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length32_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE41-LABEL: define i1 @length32_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE41-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE41-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 32) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length48(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length48(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length48(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length48(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length48(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 48) nounwind
  ret i32 %m
}

define i1 @length48_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length48_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $48
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length48_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length48_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length48_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = or i128 [[TMP14]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = icmp ne i128 [[TMP15]], 0
; X86-SSE2-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length48_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = or i128 [[TMP14]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = icmp ne i128 [[TMP15]], 0
; X86-SSE41-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 48) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length48_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length48_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length48_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length48_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 48) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length48_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length48_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length48_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length48_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 48) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_eq_prefer128(ptr %x, ptr %y) nounwind "prefer-vector-width"="128" {
; X86-NOSSE-LABEL: length48_eq_prefer128:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $48
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length48_eq_prefer128(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length48_eq_prefer128(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length48_eq_prefer128(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = or i128 [[TMP14]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP16:%.*]] = icmp ne i128 [[TMP15]], 0
; X86-SSE2-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length48_eq_prefer128(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR2]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = or i128 [[TMP14]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP16:%.*]] = icmp ne i128 [[TMP15]], 0
; X86-SSE41-NEXT:    [[TMP17:%.*]] = zext i1 [[TMP16]] to i32
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP17]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 48) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length48_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length48_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $48
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length48_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 48) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length48_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 48) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length48_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE2-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = or i128 [[TMP9]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP11:%.*]] = icmp ne i128 [[TMP10]], 0
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i1 [[TMP11]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP11]]
;
; X86-SSE41-LABEL: define i1 @length48_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE41-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE41-NEXT:    [[TMP9:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP10:%.*]] = or i128 [[TMP9]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP11:%.*]] = icmp ne i128 [[TMP10]], 0
; X86-SSE41-NEXT:    [[TMP12:%.*]] = zext i1 [[TMP11]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP11]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 48) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length63(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length63(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length63(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length63(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length63(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 63) nounwind
  ret i32 %m
}

define i1 @length63_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length63_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $63
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length63_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length63_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length63_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 47
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 47
; X86-SSE2-NEXT:    [[TMP16:%.*]] = load i128, ptr [[TMP14]], align 1
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i128, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = xor i128 [[TMP16]], [[TMP17]]
; X86-SSE2-NEXT:    [[TMP19:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP20:%.*]] = or i128 [[TMP13]], [[TMP18]]
; X86-SSE2-NEXT:    [[TMP21:%.*]] = or i128 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    [[TMP22:%.*]] = icmp ne i128 [[TMP21]], 0
; X86-SSE2-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP22]]
;
; X86-SSE41-LABEL: define i1 @length63_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 47
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 47
; X86-SSE41-NEXT:    [[TMP16:%.*]] = load i128, ptr [[TMP14]], align 1
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i128, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = xor i128 [[TMP16]], [[TMP17]]
; X86-SSE41-NEXT:    [[TMP19:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP20:%.*]] = or i128 [[TMP13]], [[TMP18]]
; X86-SSE41-NEXT:    [[TMP21:%.*]] = or i128 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    [[TMP22:%.*]] = icmp ne i128 [[TMP21]], 0
; X86-SSE41-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP22]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 63) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length63_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length63_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length63_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length63_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 63) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length63_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length63_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length63_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length63_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 63) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 63) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length63_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length63_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $63
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length63_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 63) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length63_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 63) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length63_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE2-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 47
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = xor i128 [[TMP10]], 66716800424378146251538984255488604215
; X86-SSE2-NEXT:    [[TMP12:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP13:%.*]] = or i128 [[TMP8]], [[TMP11]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i128 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = icmp ne i128 [[TMP14]], 0
; X86-SSE2-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length63_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE41-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 47
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = xor i128 [[TMP10]], 66716800424378146251538984255488604215
; X86-SSE41-NEXT:    [[TMP12:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP13:%.*]] = or i128 [[TMP8]], [[TMP11]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i128 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = icmp ne i128 [[TMP14]], 0
; X86-SSE41-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 63) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length64(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length64(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length64(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length64(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length64(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 64) nounwind
  ret i32 %m
}

define i1 @length64_eq(ptr %x, ptr %y) nounwind {
; X86-NOSSE-LABEL: length64_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $64
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length64_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length64_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length64_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE2-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 48
; X86-SSE2-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; X86-SSE2-NEXT:    [[TMP16:%.*]] = load i128, ptr [[TMP14]], align 1
; X86-SSE2-NEXT:    [[TMP17:%.*]] = load i128, ptr [[TMP15]], align 1
; X86-SSE2-NEXT:    [[TMP18:%.*]] = xor i128 [[TMP16]], [[TMP17]]
; X86-SSE2-NEXT:    [[TMP19:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP20:%.*]] = or i128 [[TMP13]], [[TMP18]]
; X86-SSE2-NEXT:    [[TMP21:%.*]] = or i128 [[TMP19]], [[TMP20]]
; X86-SSE2-NEXT:    [[TMP22:%.*]] = icmp ne i128 [[TMP21]], 0
; X86-SSE2-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP22]]
;
; X86-SSE41-LABEL: define i1 @length64_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE41-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE41-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE41-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[Y]], i64 32
; X86-SSE41-NEXT:    [[TMP11:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP12:%.*]] = load i128, ptr [[TMP10]], align 1
; X86-SSE41-NEXT:    [[TMP13:%.*]] = xor i128 [[TMP11]], [[TMP12]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[X]], i64 48
; X86-SSE41-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[Y]], i64 48
; X86-SSE41-NEXT:    [[TMP16:%.*]] = load i128, ptr [[TMP14]], align 1
; X86-SSE41-NEXT:    [[TMP17:%.*]] = load i128, ptr [[TMP15]], align 1
; X86-SSE41-NEXT:    [[TMP18:%.*]] = xor i128 [[TMP16]], [[TMP17]]
; X86-SSE41-NEXT:    [[TMP19:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE41-NEXT:    [[TMP20:%.*]] = or i128 [[TMP13]], [[TMP18]]
; X86-SSE41-NEXT:    [[TMP21:%.*]] = or i128 [[TMP19]], [[TMP20]]
; X86-SSE41-NEXT:    [[TMP22:%.*]] = icmp ne i128 [[TMP21]], 0
; X86-SSE41-NEXT:    [[TMP23:%.*]] = zext i1 [[TMP22]] to i32
; X86-SSE41-NEXT:    ret i1 [[TMP22]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 64) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length64_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length64_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length64_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length64_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 64) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length64_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length64_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length64_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length64_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 64) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_eq_const(ptr %X) nounwind {
; X86-NOSSE-LABEL: length64_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $64
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length64_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 64) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length64_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 64) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length64_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE2-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 48
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = xor i128 [[TMP10]], 68051240286688436651889234231545575736
; X86-SSE2-NEXT:    [[TMP12:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP13:%.*]] = or i128 [[TMP8]], [[TMP11]]
; X86-SSE2-NEXT:    [[TMP14:%.*]] = or i128 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    [[TMP15:%.*]] = icmp ne i128 [[TMP14]], 0
; X86-SSE2-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length64_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE41-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE41-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE41-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE41-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE41-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[X]], i64 32
; X86-SSE41-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP6]], align 1
; X86-SSE41-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP7]], 73389002901949112059321871464991568690
; X86-SSE41-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[X]], i64 48
; X86-SSE41-NEXT:    [[TMP10:%.*]] = load i128, ptr [[TMP9]], align 1
; X86-SSE41-NEXT:    [[TMP11:%.*]] = xor i128 [[TMP10]], 68051240286688436651889234231545575736
; X86-SSE41-NEXT:    [[TMP12:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE41-NEXT:    [[TMP13:%.*]] = or i128 [[TMP8]], [[TMP11]]
; X86-SSE41-NEXT:    [[TMP14:%.*]] = or i128 [[TMP12]], [[TMP13]]
; X86-SSE41-NEXT:    [[TMP15:%.*]] = icmp ne i128 [[TMP14]], 0
; X86-SSE41-NEXT:    [[TMP16:%.*]] = zext i1 [[TMP15]] to i32
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP16]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 64) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length96(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length96(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length96(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length96(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length96(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 96) nounwind
  ret i32 %m
}

define i1 @length96_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length96_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length96_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length96_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length96_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 96) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length96_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length96_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length96_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length96_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 96) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length96_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length96_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length96_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length96_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 96) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 96) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length96_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length96_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 96) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length96_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 96) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length96_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 96) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length96_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 96) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 96) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length127(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length127(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length127(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length127(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length127(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 127) nounwind
  ret i32 %m
}

define i1 @length127_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length127_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length127_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length127_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length127_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 127) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length127_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length127_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length127_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length127_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 127) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length127_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length127_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length127_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length127_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 127) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 127) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length127_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length127_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 127) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length127_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 127) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length127_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 127) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length127_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 127) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 127) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length128(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length128(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length128(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length128(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length128(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 128) nounwind
  ret i32 %m
}

define i1 @length128_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length128_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length128_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length128_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length128_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 128) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length128_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length128_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length128_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length128_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 128) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length128_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length128_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length128_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length128_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 128) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 128) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length128_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length128_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 128) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length128_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 128) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length128_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 128) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length128_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 128) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 128) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length192(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length192(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length192(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length192(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length192(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 192) nounwind
  ret i32 %m
}

define i1 @length192_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length192_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length192_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length192_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length192_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 192) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length192_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length192_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length192_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length192_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 192) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length192_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length192_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length192_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length192_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 192) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 192) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length192_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length192_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 192) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length192_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 192) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length192_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 192) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length192_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 192) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 192) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length255(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length255(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length255(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length255(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length255(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 255) nounwind
  ret i32 %m
}

define i1 @length255_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length255_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length255_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length255_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length255_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 255) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length255_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length255_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length255_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length255_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 255) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length255_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length255_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length255_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length255_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 255) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 255) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length255_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length255_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 255) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length255_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 255) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length255_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 255) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length255_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 255) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 255) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length256(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length256(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length256(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length256(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length256(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 256) nounwind
  ret i32 %m
}

define i1 @length256_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length256_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length256_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length256_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length256_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 256) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length256_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length256_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length256_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length256_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 256) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length256_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length256_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length256_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length256_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 256) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 256) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length256_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length256_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 256) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length256_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 256) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length256_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 256) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length256_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 256) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 256) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length384(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length384(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length384(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length384(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length384(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 384) nounwind
  ret i32 %m
}

define i1 @length384_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length384_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length384_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length384_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length384_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 384) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length384_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length384_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length384_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length384_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 384) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length384_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length384_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length384_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length384_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 384) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 384) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length384_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length384_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 384) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length384_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 384) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length384_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 384) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length384_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 384) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 384) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length511(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length511(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length511(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length511(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length511(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 511) nounwind
  ret i32 %m
}

define i1 @length511_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length511_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length511_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length511_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length511_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 511) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length511_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length511_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length511_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length511_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 511) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length511_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length511_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length511_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length511_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 511) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 511) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length511_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length511_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 511) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length511_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 511) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length511_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 511) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length511_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 511) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 511) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length512(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @length512(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @length512(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length512(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @length512(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 512) nounwind
  ret i32 %m
}

define i1 @length512_eq(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length512_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length512_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length512_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length512_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 512) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_lt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length512_lt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length512_lt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length512_lt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length512_lt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp slt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 512) nounwind
  %cmp = icmp slt i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_gt(ptr %x, ptr %y) nounwind {
; X86-LABEL: define i1 @length512_gt(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE1-LABEL: define i1 @length512_gt(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE1-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE1-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length512_gt(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
; X86-SSE41-LABEL: define i1 @length512_gt(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 512) #[[ATTR5]]
; X86-SSE41-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[CALL]], 0
; X86-SSE41-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 512) nounwind
  %cmp = icmp sgt i32 %call, 0
  ret i1 %cmp
}

define i1 @length512_eq_const(ptr %X) nounwind {
; X86-LABEL: define i1 @length512_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 512) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @length512_eq_const(
; X86-SSE1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 512) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length512_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 512) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @length512_eq_const(
; X86-SSE41-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 512) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 512) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; This checks that we do not do stupid things with huge sizes.
define i32 @huge_length(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i32 @huge_length(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @huge_length(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @huge_length(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @huge_length(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 9223372036854775807) nounwind
  ret i32 %m
}

define i1 @huge_length_eq(ptr %X, ptr %Y) nounwind {
; X86-LABEL: define i1 @huge_length_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @huge_length_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @huge_length_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @huge_length_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 -1) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 9223372036854775807) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; This checks non-constant sizes.
define i32 @nonconst_length(ptr %X, ptr %Y, i32 %size) nounwind {
; X86-LABEL: define i32 @nonconst_length(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE1-LABEL: define i32 @nonconst_length(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE1-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @nonconst_length(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
; X86-SSE41-LABEL: define i32 @nonconst_length(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE41-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 %size) nounwind
  ret i32 %m
}

define i1 @nonconst_length_eq(ptr %X, ptr %Y, i32 %size) nounwind {
; X86-LABEL: define i1 @nonconst_length_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE1-LABEL: define i1 @nonconst_length_eq(
; X86-SSE1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE1-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @nonconst_length_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
; X86-SSE41-LABEL: define i1 @nonconst_length_eq(
; X86-SSE41-SAME: ptr [[X:%.*]], ptr [[Y:%.*]], i32 [[SIZE:%.*]]) #[[ATTR1]] {
; X86-SSE41-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 [[SIZE]]) #[[ATTR5]]
; X86-SSE41-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE41-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 %size) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}
