; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=expand-memcmp -passes=expand-memcmp -memcmp-num-loads-per-block=1 -mtriple=x86_64-unknown-unknown         < %s | FileCheck %s --check-prefix=X64 --check-prefix=X64_1LD
; RUN: opt -S -passes=expand-memcmp -memcmp-num-loads-per-block=2 -mtriple=x86_64-unknown-unknown         < %s | FileCheck %s --check-prefix=X64 --check-prefix=X64_2LD


@.str1 = private constant [4 x i8] c"\00\00\00\00", align 1
@.str2 = private constant [4 x i8] c"\ff\ff\ff\ff", align 1

declare i32 @memcmp(ptr, ptr, i64)

define i32 @length4_same() nounwind {
; X64-LABEL: define i32 @length4_same(
; X64-SAME: ) #[[ATTR0:[0-9]+]] {
; X64-NEXT:    ret i32 0
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str1, i64 4) nounwind
  ret i32 %m
}

define i1 @length4_same_lt() nounwind {
; X64-LABEL: define i1 @length4_same_lt(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str1, i64 4) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length4_same_gt() nounwind {
; X64-LABEL: define i1 @length4_same_gt(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str1, i64 4) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length4_same_le() nounwind {
; X64-LABEL: define i1 @length4_same_le(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str1, i64 4) nounwind
  %c = icmp sle i32 %m, 0
  ret i1 %c
}

define i1 @length4_same_ge() nounwind {
; X64-LABEL: define i1 @length4_same_ge(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str1, i64 4) nounwind
  %c = icmp sge i32 %m, 0
  ret i1 %c
}


define i32 @length4() nounwind {
; X64-LABEL: define i32 @length4(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i32 -1
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str2, i64 4) nounwind
  ret i32 %m
}

define i1 @length4_lt() nounwind {
; X64-LABEL: define i1 @length4_lt(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str2, i64 4) nounwind
  %c = icmp slt i32 %m, 0
  ret i1 %c
}

define i1 @length4_gt() nounwind {
; X64-LABEL: define i1 @length4_gt(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str2, i64 4) nounwind
  %c = icmp sgt i32 %m, 0
  ret i1 %c
}

define i1 @length4_le() nounwind {
; X64-LABEL: define i1 @length4_le(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 true
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str2, i64 4) nounwind
  %c = icmp sle i32 %m, 0
  ret i1 %c
}

define i1 @length4_ge() nounwind {
; X64-LABEL: define i1 @length4_ge(
; X64-SAME: ) #[[ATTR0]] {
; X64-NEXT:    ret i1 false
;
  %m = tail call i32 @memcmp(ptr @.str1, ptr @.str2, i64 4) nounwind
  %c = icmp sge i32 %m, 0
  ret i1 %c
}


;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; X64_1LD: {{.*}}
; X64_2LD: {{.*}}
