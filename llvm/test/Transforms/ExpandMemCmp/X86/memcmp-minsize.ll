; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=expand-memcmp -mtriple=x86_64-unknown-unknown < %s | FileCheck %s --check-prefix=X64
; RUN: opt -S -passes=expand-memcmp -mtriple=x86_64-unknown-unknown -mattr=avx < %s | FileCheck %s --check-prefix=X64-AVX1
; RUN: opt -S -passes=expand-memcmp -mtriple=x86_64-unknown-unknown -mattr=avx2 < %s | FileCheck %s --check-prefix=X64-AVX2

; This tests codegen time inlining/optimization of memcmp
; rdar://6480398

@.str = private constant [65 x i8] c"0123456789012345678901234567890123456789012345678901234567890123\00", align 1

declare dso_local i32 @memcmp(ptr, ptr, i64)

define i32 @length2(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length2(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0:[0-9]+]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR1:[0-9]+]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length2(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR2:[0-9]+]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length2(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR2:[0-9]+]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  ret i32 %m
}

define i1 @length2_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length2_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length2_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length2_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_const(ptr %X) nounwind minsize {
; X64-LABEL: define i1 @length2_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 2) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length2_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 2) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length2_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 2) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 2) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_nobuiltin_attr(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR2:[0-9]+]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR3:[0-9]+]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 2) #[[ATTR3:[0-9]+]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 2) nounwind nobuiltin
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length3(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length3(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length3(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length3(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 3) nounwind
  ret i32 %m
}

define i1 @length3_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length3_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length3_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length3_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 3) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 3) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length4(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length4(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length4(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length4(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  ret i32 %m
}

define i1 @length4_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length4_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length4_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length4_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 4) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 4) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length4_eq_const(ptr %X) nounwind minsize {
; X64-LABEL: define i1 @length4_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 4) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length4_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 4) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length4_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 4) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i64 4) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length5(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length5(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length5(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length5(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 5) nounwind
  ret i32 %m
}

define i1 @length5_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length5_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length5_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length5_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 5) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 5) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length8(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length8(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length8(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length8(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 8) nounwind
  ret i32 %m
}

define i1 @length8_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length8_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length8_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length8_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 8) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 8) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length8_eq_const(ptr %X) nounwind minsize {
; X64-LABEL: define i1 @length8_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 8) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length8_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 8) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length8_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 8) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 8) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length12_eq(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i1 @length12_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length12_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length12_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 12) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length12(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length12(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length12(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length12(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 12) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 12) nounwind
  ret i32 %m
}

; PR33329 - https://bugs.llvm.org/show_bug.cgi?id=33329

define i32 @length16(ptr %X, ptr %Y) nounwind minsize {
;
; X64-LABEL: define i32 @length16(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length16(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length16(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 16) nounwind
  ret i32 %m
}

define i1 @length16_eq(ptr %x, ptr %y) nounwind minsize {
; X64-SSE2-LABEL: length16_eq:
; X64-SSE2:       # %bb.0:
; X64-SSE2-NEXT:    movdqu (%rsi), %xmm0
; X64-SSE2-NEXT:    movdqu (%rdi), %xmm1
; X64-SSE2-NEXT:    pcmpeqb %xmm0, %xmm1
; X64-SSE2-NEXT:    pmovmskb %xmm1, %eax
; X64-SSE2-NEXT:    cmpl $65535, %eax # imm = 0xFFFF
; X64-SSE2-NEXT:    setne %al
; X64-SSE2-NEXT:    retq
;
; X64-AVX-LABEL: length16_eq:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vmovdqu (%rdi), %xmm0
; X64-AVX-NEXT:    vpxor (%rsi), %xmm0, %xmm0
; X64-AVX-NEXT:    vptest %xmm0, %xmm0
; X64-AVX-NEXT:    setne %al
; X64-AVX-NEXT:    retq
; X64-LABEL: define i1 @length16_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR1]]
; X64-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-NEXT:    ret i1 [[CMP]]
;
; X64-AVX1-LABEL: define i1 @length16_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR2]]
; X64-AVX1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-AVX1-NEXT:    ret i1 [[CMP]]
;
; X64-AVX2-LABEL: define i1 @length16_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 16) #[[ATTR2]]
; X64-AVX2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-AVX2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 16) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_eq_const(ptr %X) nounwind minsize {
; X64-SSE2-LABEL: length16_eq_const:
; X64-SSE2:       # %bb.0:
; X64-SSE2-NEXT:    movdqu (%rdi), %xmm0
; X64-SSE2-NEXT:    pcmpeqb {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; X64-SSE2-NEXT:    pmovmskb %xmm0, %eax
; X64-SSE2-NEXT:    cmpl $65535, %eax # imm = 0xFFFF
; X64-SSE2-NEXT:    sete %al
; X64-SSE2-NEXT:    retq
;
; X64-AVX-LABEL: length16_eq_const:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vmovdqu (%rdi), %xmm0
; X64-AVX-NEXT:    vpxor {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0, %xmm0
; X64-AVX-NEXT:    vptest %xmm0, %xmm0
; X64-AVX-NEXT:    sete %al
; X64-AVX-NEXT:    retq
; X64-LABEL: define i1 @length16_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 16) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length16_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 16) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length16_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 16) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 16) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; PR33914 - https://bugs.llvm.org/show_bug.cgi?id=33914

define i32 @length24(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length24(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length24(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length24(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 24) nounwind
  ret i32 %m
}

define i1 @length24_eq(ptr %x, ptr %y) nounwind minsize {
; X64-LABEL: define i1 @length24_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR1]]
; X64-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-NEXT:    ret i1 [[CMP]]
;
; X64-AVX1-LABEL: define i1 @length24_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR2]]
; X64-AVX1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-AVX1-NEXT:    ret i1 [[CMP]]
;
; X64-AVX2-LABEL: define i1 @length24_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 24) #[[ATTR2]]
; X64-AVX2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-AVX2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 24) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_eq_const(ptr %X) nounwind minsize {
; X64-LABEL: define i1 @length24_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 24) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length24_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 24) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length24_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 24) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 24) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length32(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length32(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length32(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length32(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 32) nounwind
  ret i32 %m
}

; PR33325 - https://bugs.llvm.org/show_bug.cgi?id=33325

define i1 @length32_eq(ptr %x, ptr %y) nounwind minsize {
; X64-SSE2-LABEL: length32_eq:
; X64-SSE2:       # %bb.0:
; X64-SSE2-NEXT:    pushq %rax
; X64-SSE2-NEXT:    pushq $32
; X64-SSE2-NEXT:    popq %rdx
; X64-SSE2-NEXT:    callq memcmp
; X64-SSE2-NEXT:    testl %eax, %eax
; X64-SSE2-NEXT:    sete %al
; X64-SSE2-NEXT:    popq %rcx
; X64-SSE2-NEXT:    retq
;
; X64-LABEL: define i1 @length32_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR1]]
; X64-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-NEXT:    ret i1 [[CMP]]
;
; X64-AVX1-LABEL: define i1 @length32_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR2]]
; X64-AVX1-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-AVX1-NEXT:    ret i1 [[CMP]]
;
; X64-AVX2-LABEL: define i1 @length32_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 32) #[[ATTR2]]
; X64-AVX2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X64-AVX2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_const(ptr %X) nounwind minsize {
; X64-SSE2-LABEL: length32_eq_const:
; X64-SSE2:       # %bb.0:
; X64-SSE2-NEXT:    pushq %rax
; X64-SSE2-NEXT:    pushq $32
; X64-SSE2-NEXT:    popq %rdx
; X64-SSE2-NEXT:    movl $.L.str, %esi
; X64-SSE2-NEXT:    callq memcmp
; X64-SSE2-NEXT:    testl %eax, %eax
; X64-SSE2-NEXT:    setne %al
; X64-SSE2-NEXT:    popq %rcx
; X64-SSE2-NEXT:    retq
;
; X64-LABEL: define i1 @length32_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 32) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length32_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 32) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length32_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 32) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 32) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length64(ptr %X, ptr %Y) nounwind minsize {
; X64-LABEL: define i32 @length64(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR1]]
; X64-NEXT:    ret i32 [[M]]
;
; X64-AVX1-LABEL: define i32 @length64(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR2]]
; X64-AVX1-NEXT:    ret i32 [[M]]
;
; X64-AVX2-LABEL: define i32 @length64(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR2]]
; X64-AVX2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i64 64) nounwind
  ret i32 %m
}

define i1 @length64_eq(ptr %x, ptr %y) nounwind minsize {
; X64-LABEL: define i1 @length64_eq(
; X64-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR1]]
; X64-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-NEXT:    ret i1 [[CMP]]
;
; X64-AVX1-LABEL: define i1 @length64_eq(
; X64-AVX1-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR2]]
; X64-AVX1-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-AVX1-NEXT:    ret i1 [[CMP]]
;
; X64-AVX2-LABEL: define i1 @length64_eq(
; X64-AVX2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i64 64) #[[ATTR2]]
; X64-AVX2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X64-AVX2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i64 64) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_eq_const(ptr %X) nounwind minsize {
; X64-LABEL: define i1 @length64_eq_const(
; X64-SAME: ptr [[X:%.*]]) #[[ATTR0]] {
; X64-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 64) #[[ATTR1]]
; X64-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-NEXT:    ret i1 [[C]]
;
; X64-AVX1-LABEL: define i1 @length64_eq_const(
; X64-AVX1-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX1-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 64) #[[ATTR2]]
; X64-AVX1-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX1-NEXT:    ret i1 [[C]]
;
; X64-AVX2-LABEL: define i1 @length64_eq_const(
; X64-AVX2-SAME: ptr [[X:%.*]]) #[[ATTR1]] {
; X64-AVX2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i64 64) #[[ATTR2]]
; X64-AVX2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X64-AVX2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i64 64) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

