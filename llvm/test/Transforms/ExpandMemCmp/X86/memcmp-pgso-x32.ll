; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=expand-memcmp -mtriple=i686-unknown-unknown -mattr=cmov < %s | FileCheck %s --check-prefix=X86
; RUN: opt -S -passes=expand-memcmp -mtriple=i686-unknown-unknown -mattr=+sse2 < %s | FileCheck %s  --check-prefix=X86-SSE2

; This tests codegen time inlining/optimization of memcmp
; rdar://6480398

@.str = private constant [65 x i8] c"0123456789012345678901234567890123456789012345678901234567890123\00", align 1

declare dso_local i32 @memcmp(ptr, ptr, i32)
declare dso_local i32 @bcmp(ptr, ptr, i32)

define i32 @length2(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length2(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] !prof [[PROF14:![0-9]+]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    ret i32 [[TMP7]]
;
; X86-SSE2-LABEL: define i32 @length2(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1:[0-9]+]] !prof [[PROF14:![0-9]+]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; X86-SSE2-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    ret i32 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  ret i32 %m
}

define i1 @length2_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length2_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP4]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_const(ptr %X) nounwind !prof !14 {
; X86-LABEL: define i1 @length2_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-NEXT:    ret i1 [[TMP2]]
;
; X86-SSE2-LABEL: define i1 @length2_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i16 [[TMP1]], 12849
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP2]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i32 2) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length2_eq_nobuiltin_attr(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR3:[0-9]+]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length2_eq_nobuiltin_attr(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 2) #[[ATTR3:[0-9]+]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 2) nounwind nobuiltin
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length3(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length3(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br label [[ENDBLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length3(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i16 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i16 @llvm.bswap.i16(i16 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i16 @llvm.bswap.i16(i16 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i16 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br label [[ENDBLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 3) nounwind
  ret i32 %m
}

define i1 @length3_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length3_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE2-LABEL: define i1 @length3_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i16 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 2
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 2
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i16
; X86-SSE2-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i16
; X86-SSE2-NEXT:    [[TMP10:%.*]] = xor i16 [[TMP8]], [[TMP9]]
; X86-SSE2-NEXT:    [[TMP11:%.*]] = or i16 [[TMP3]], [[TMP10]]
; X86-SSE2-NEXT:    [[TMP12:%.*]] = icmp ne i16 [[TMP11]], 0
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 3) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length4(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length4(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-NEXT:    ret i32 [[TMP9]]
;
; X86-SSE2-LABEL: define i32 @length4(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; X86-SSE2-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; X86-SSE2-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; X86-SSE2-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; X86-SSE2-NEXT:    ret i32 [[TMP9]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  ret i32 %m
}

define i1 @length4_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length4_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-NEXT:    ret i1 [[TMP3]]
;
; X86-SSE2-LABEL: define i1 @length4_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP3]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 4) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length4_eq_const(ptr %X) nounwind !prof !14 {
; X86-LABEL: define i1 @length4_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length4_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i32 [[TMP1]], 875770417
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr getelementptr inbounds ([65 x i8], ptr @.str, i32 0, i32 1), i32 4) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @length5(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length5(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br label [[ENDBLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length5(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP5:%.*]], [[TMP6:%.*]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1:%.*]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12:%.*]] = zext i8 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i8 [[TMP11]] to i32
; X86-SSE2-NEXT:    [[TMP14:%.*]] = sub i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br label [[ENDBLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ [[TMP14]], [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 5) nounwind
  ret i32 %m
}

define i1 @length5_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length5_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-NEXT:    ret i1 [[TMP12]]
;
; X86-SSE2-LABEL: define i1 @length5_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i8 [[TMP6]] to i32
; X86-SSE2-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP7]] to i32
; X86-SSE2-NEXT:    [[TMP10:%.*]] = xor i32 [[TMP8]], [[TMP9]]
; X86-SSE2-NEXT:    [[TMP11:%.*]] = or i32 [[TMP3]], [[TMP10]]
; X86-SSE2-NEXT:    [[TMP12:%.*]] = icmp ne i32 [[TMP11]], 0
; X86-SSE2-NEXT:    [[TMP13:%.*]] = zext i1 [[TMP12]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP12]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 5) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length8(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length8(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    br label [[LOADBB:%.*]]
; X86:       res_block:
; X86-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-NEXT:    br label [[ENDBLOCK:%.*]]
; X86:       loadbb:
; X86-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86:       loadbb1:
; X86-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86:       endblock:
; X86-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-NEXT:    ret i32 [[PHI_RES]]
;
; X86-SSE2-LABEL: define i32 @length8(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    br label [[LOADBB:%.*]]
; X86-SSE2:       res_block:
; X86-SSE2-NEXT:    [[PHI_SRC1:%.*]] = phi i32 [ [[TMP5:%.*]], [[LOADBB]] ], [ [[TMP12:%.*]], [[LOADBB1:%.*]] ]
; X86-SSE2-NEXT:    [[PHI_SRC2:%.*]] = phi i32 [ [[TMP6:%.*]], [[LOADBB]] ], [ [[TMP13:%.*]], [[LOADBB1]] ]
; X86-SSE2-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[PHI_SRC1]], [[PHI_SRC2]]
; X86-SSE2-NEXT:    [[TMP2:%.*]] = select i1 [[TMP1]], i32 -1, i32 1
; X86-SSE2-NEXT:    br label [[ENDBLOCK:%.*]]
; X86-SSE2:       loadbb:
; X86-SSE2-NEXT:    [[TMP3:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP5]] = call i32 @llvm.bswap.i32(i32 [[TMP3]])
; X86-SSE2-NEXT:    [[TMP6]] = call i32 @llvm.bswap.i32(i32 [[TMP4]])
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP5]], [[TMP6]]
; X86-SSE2-NEXT:    br i1 [[TMP7]], label [[LOADBB1]], label [[RES_BLOCK:%.*]]
; X86-SSE2:       loadbb1:
; X86-SSE2-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP10:%.*]] = load i32, ptr [[TMP8]], align 1
; X86-SSE2-NEXT:    [[TMP11:%.*]] = load i32, ptr [[TMP9]], align 1
; X86-SSE2-NEXT:    [[TMP12]] = call i32 @llvm.bswap.i32(i32 [[TMP10]])
; X86-SSE2-NEXT:    [[TMP13]] = call i32 @llvm.bswap.i32(i32 [[TMP11]])
; X86-SSE2-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[TMP12]], [[TMP13]]
; X86-SSE2-NEXT:    br i1 [[TMP14]], label [[ENDBLOCK]], label [[RES_BLOCK]]
; X86-SSE2:       endblock:
; X86-SSE2-NEXT:    [[PHI_RES:%.*]] = phi i32 [ 0, [[LOADBB1]] ], [ [[TMP2]], [[RES_BLOCK]] ]
; X86-SSE2-NEXT:    ret i32 [[PHI_RES]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 8) nounwind
  ret i32 %m
}

define i1 @length8_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length8_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length8_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 4
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i32, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i32, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i32 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i32 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i32 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 8) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i1 @length8_eq_const(ptr %X) nounwind !prof !14 {
; X86-LABEL: define i1 @length8_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-NEXT:    ret i1 [[TMP7]]
;
; X86-SSE2-LABEL: define i1 @length8_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i32, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP1]], 858927408
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 4
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP4]], 926299444
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i32 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i32 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 8) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i1 @length12_eq(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i1 @length12_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 12) #[[ATTR4:[0-9]+]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length12_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 12) #[[ATTR4:[0-9]+]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 12) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length12(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length12(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 12) #[[ATTR4]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length12(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 12) #[[ATTR4]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 12) nounwind
  ret i32 %m
}

; PR33329 - https://bugs.llvm.org/show_bug.cgi?id=33329

define i32 @length16(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length16(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 16) #[[ATTR4]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length16(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 16) #[[ATTR4]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 16) nounwind
  ret i32 %m
}

define i1 @length16_eq(ptr %x, ptr %y) nounwind !prof !14 {
; X86-NOSSE-LABEL: length16_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $16
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length16_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 16) #[[ATTR4]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length16_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP3]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 16) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length16_eq_const(ptr %X) nounwind !prof !14 {
; X86-NOSSE-LABEL: length16_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $16
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length16_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 16) #[[ATTR4]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length16_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = icmp ne i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = zext i1 [[TMP2]] to i32
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[TMP3]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 16) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

; PR33914 - https://bugs.llvm.org/show_bug.cgi?id=33914

define i32 @length24(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length24(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR4]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length24(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR4]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 24) nounwind
  ret i32 %m
}

define i1 @length24_eq(ptr %x, ptr %y) nounwind !prof !14 {
; X86-NOSSE-LABEL: length24_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $24
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length24_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 24) #[[ATTR4]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length24_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 8
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 24) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length24_eq_const(ptr %X) nounwind !prof !14 {
; X86-NOSSE-LABEL: length24_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $24
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length24_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 24) #[[ATTR4]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length24_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 8
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 68051240286688436651889234231545575736
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 24) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length32(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length32(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR4]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length32(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR4]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 32) nounwind
  ret i32 %m
}

; PR33325 - https://bugs.llvm.org/show_bug.cgi?id=33325

define i1 @length32_eq(ptr %x, ptr %y) nounwind !prof !14 {
; X86-NOSSE-LABEL: length32_eq:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $32
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    sete %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length32_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 32) #[[ATTR4]]
; X86-NEXT:    [[CMP:%.*]] = icmp eq i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length32_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i128, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = xor i128 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[Y]], i64 16
; X86-SSE2-NEXT:    [[TMP6:%.*]] = load i128, ptr [[TMP4]], align 1
; X86-SSE2-NEXT:    [[TMP7:%.*]] = load i128, ptr [[TMP5]], align 1
; X86-SSE2-NEXT:    [[TMP8:%.*]] = xor i128 [[TMP6]], [[TMP7]]
; X86-SSE2-NEXT:    [[TMP9:%.*]] = or i128 [[TMP3]], [[TMP8]]
; X86-SSE2-NEXT:    [[TMP10:%.*]] = icmp ne i128 [[TMP9]], 0
; X86-SSE2-NEXT:    [[TMP11:%.*]] = zext i1 [[TMP10]] to i32
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp eq i32 [[TMP11]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 32) nounwind
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

define i1 @length32_eq_const(ptr %X) nounwind !prof !14 {
; X86-NOSSE-LABEL: length32_eq_const:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl $32
; X86-NOSSE-NEXT:    pushl $.L.str
; X86-NOSSE-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    calll memcmp
; X86-NOSSE-NEXT:    addl $12, %esp
; X86-NOSSE-NEXT:    testl %eax, %eax
; X86-NOSSE-NEXT:    setne %al
; X86-NOSSE-NEXT:    retl
;
; X86-LABEL: define i1 @length32_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 32) #[[ATTR4]]
; X86-NEXT:    [[C:%.*]] = icmp ne i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length32_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i128, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = xor i128 [[TMP1]], 70720121592765328381466889075544961328
; X86-SSE2-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[X]], i64 16
; X86-SSE2-NEXT:    [[TMP4:%.*]] = load i128, ptr [[TMP3]], align 1
; X86-SSE2-NEXT:    [[TMP5:%.*]] = xor i128 [[TMP4]], 65382562593882267225249597816672106294
; X86-SSE2-NEXT:    [[TMP6:%.*]] = or i128 [[TMP2]], [[TMP5]]
; X86-SSE2-NEXT:    [[TMP7:%.*]] = icmp ne i128 [[TMP6]], 0
; X86-SSE2-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP7]] to i32
; X86-SSE2-NEXT:    ret i1 [[TMP7]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 32) nounwind
  %c = icmp ne i32 %m, 0
  ret i1 %c
}

define i32 @length64(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @length64(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR4]]
; X86-NEXT:    ret i32 [[M]]
;
; X86-SSE2-LABEL: define i32 @length64(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR4]]
; X86-SSE2-NEXT:    ret i32 [[M]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr %Y, i32 64) nounwind
  ret i32 %m
}

define i1 @length64_eq(ptr %x, ptr %y) nounwind !prof !14 {
; X86-LABEL: define i1 @length64_eq(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR4]]
; X86-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-NEXT:    ret i1 [[CMP]]
;
; X86-SSE2-LABEL: define i1 @length64_eq(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[CALL:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr [[Y]], i32 64) #[[ATTR4]]
; X86-SSE2-NEXT:    [[CMP:%.*]] = icmp ne i32 [[CALL]], 0
; X86-SSE2-NEXT:    ret i1 [[CMP]]
;
  %call = tail call i32 @memcmp(ptr %x, ptr %y, i32 64) nounwind
  %cmp = icmp ne i32 %call, 0
  ret i1 %cmp
}

define i1 @length64_eq_const(ptr %X) nounwind !prof !14 {
; X86-LABEL: define i1 @length64_eq_const(
; X86-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 64) #[[ATTR4]]
; X86-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-NEXT:    ret i1 [[C]]
;
; X86-SSE2-LABEL: define i1 @length64_eq_const(
; X86-SSE2-SAME: ptr [[X:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[M:%.*]] = tail call i32 @memcmp(ptr [[X]], ptr @.str, i32 64) #[[ATTR4]]
; X86-SSE2-NEXT:    [[C:%.*]] = icmp eq i32 [[M]], 0
; X86-SSE2-NEXT:    ret i1 [[C]]
;
  %m = tail call i32 @memcmp(ptr %X, ptr @.str, i32 64) nounwind
  %c = icmp eq i32 %m, 0
  ret i1 %c
}

define i32 @bcmp_length2(ptr %X, ptr %Y) nounwind !prof !14 {
; X86-LABEL: define i32 @bcmp_length2(
; X86-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-NEXT:    ret i32 [[TMP4]]
;
; X86-SSE2-LABEL: define i32 @bcmp_length2(
; X86-SSE2-SAME: ptr [[X:%.*]], ptr [[Y:%.*]]) #[[ATTR1]] !prof [[PROF14]] {
; X86-SSE2-NEXT:    [[TMP1:%.*]] = load i16, ptr [[X]], align 1
; X86-SSE2-NEXT:    [[TMP2:%.*]] = load i16, ptr [[Y]], align 1
; X86-SSE2-NEXT:    [[TMP3:%.*]] = icmp ne i16 [[TMP1]], [[TMP2]]
; X86-SSE2-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i32
; X86-SSE2-NEXT:    ret i32 [[TMP4]]
;
  %m = tail call i32 @bcmp(ptr %X, ptr %Y, i32 2) nounwind
  ret i32 %m
}

!llvm.module.flags = !{!0}
!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i32 10000}
!4 = !{!"MaxCount", i32 10}
!5 = !{!"MaxInternalCount", i32 1}
!6 = !{!"MaxFunctionCount", i32 1000}
!7 = !{!"NumCounts", i32 3}
!8 = !{!"NumFunctions", i32 3}
!9 = !{!"DetailedSummary", !10}
!10 = !{!11, !12, !13}
!11 = !{i32 10000, i32 100, i32 1}
!12 = !{i32 999000, i32 100, i32 1}
!13 = !{i32 999999, i32 1, i32 2}
!14 = !{!"function_entry_count", i32 0}
