; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=expand-memcmp -mcpu=pwr8 -mtriple=powerpc64le-unknown-gnu-linux < %s | FileCheck %s

define signext i32 @memcmp8(ptr nocapture readonly %buffer1, ptr nocapture readonly %buffer2) {
; CHECK-LABEL: define signext i32 @memcmp8(
; CHECK-SAME: ptr nocapture readonly [[BUFFER1:%.*]], ptr nocapture readonly [[BUFFER2:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[BUFFER1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[BUFFER2]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @llvm.bswap.i64(i64 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i64 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i64 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
  %call = tail call signext i32 @memcmp(ptr %buffer1, ptr %buffer2, i64 8)
  ret i32 %call
}

define signext i32 @memcmp4(ptr nocapture readonly %buffer1, ptr nocapture readonly %buffer2) {
; CHECK-LABEL: define signext i32 @memcmp4(
; CHECK-SAME: ptr nocapture readonly [[BUFFER1:%.*]], ptr nocapture readonly [[BUFFER2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[BUFFER1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[BUFFER2]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @llvm.bswap.i32(i32 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp ult i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    [[TMP7:%.*]] = zext i1 [[TMP5]] to i32
; CHECK-NEXT:    [[TMP8:%.*]] = zext i1 [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP7]], [[TMP8]]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
  %call = tail call signext i32 @memcmp(ptr %buffer1, ptr %buffer2, i64 4)
  ret i32 %call
}

define signext i32 @memcmp2(ptr nocapture readonly %buffer1, ptr nocapture readonly %buffer2) {
; CHECK-LABEL: define signext i32 @memcmp2(
; CHECK-SAME: ptr nocapture readonly [[BUFFER1:%.*]], ptr nocapture readonly [[BUFFER2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[BUFFER1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[BUFFER2]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP1]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i16 @llvm.bswap.i16(i16 [[TMP2]])
; CHECK-NEXT:    [[TMP5:%.*]] = zext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = zext i16 [[TMP4]] to i32
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    ret i32 [[TMP7]]
;
  %call = tail call signext i32 @memcmp(ptr %buffer1, ptr %buffer2, i64 2)
  ret i32 %call
}

define signext i32 @memcmp1(ptr nocapture readonly %buffer1, ptr nocapture readonly %buffer2) {
; CHECK-LABEL: define signext i32 @memcmp1(
; CHECK-SAME: ptr nocapture readonly [[BUFFER1:%.*]], ptr nocapture readonly [[BUFFER2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr [[BUFFER1]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[BUFFER2]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = zext i8 [[TMP1]] to i32
; CHECK-NEXT:    [[TMP4:%.*]] = zext i8 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = sub i32 [[TMP3]], [[TMP4]]
; CHECK-NEXT:    ret i32 [[TMP5]]
;
  %call = tail call signext i32 @memcmp(ptr %buffer1, ptr %buffer2, i64 1) #2
  ret i32 %call
}

declare signext i32 @memcmp(ptr, ptr, i64)
