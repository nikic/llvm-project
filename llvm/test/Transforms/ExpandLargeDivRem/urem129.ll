; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt -S -expandlargedivrem < %s | FileCheck %s

define void @test(i129* %ptr, i129* %out) nounwind {
  %a = load i129, i129* %ptr
  %res = urem i129 %a, 3
  store i129 %res, i129* %out
  ret void
}

; CHECK-LABEL: @test(
; CHECK-NEXT:    [[A:%.*]] = load i129, i129* [[PTR:%.*]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = call i129 @__llvm_urem129(i129 [[A]], i129 3)
; CHECK-NEXT:    store i129 [[TMP1]], i129* [[OUT:%.*]], align 4
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: define internal i129 @__llvm_urem129(i129 %0, i129 %1)
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[I:%.*]] = phi i32 [ 128, [[ENTRY:%.*]] ], [ [[NEW_I:%.*]], [[ELSE:%.*]] ]
; CHECK-NEXT:    [[R:%.*]] = phi i129 [ 0, [[ENTRY]] ], [ [[R3:%.*]], [[ELSE]] ]
; CHECK-NEXT:    [[IEXT:%.*]] = zext i32 [[I]] to i129
; CHECK-NEXT:    [[TMP2:%.*]] = lshr i129 [[TMP0:%.*]], [[IEXT]]
; CHECK-NEXT:    [[TMP3:%.*]] = trunc i129 [[TMP2]] to i1
; CHECK-NEXT:    [[NEW_R:%.*]] = shl i129 [[R]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = zext i1 [[TMP3]] to i129
; CHECK-NEXT:    [[NEW_R1:%.*]] = or i129 [[NEW_R]], [[TMP4]]
; CHECK-NEXT:    [[LOOP_EXIT_COND:%.*]] = icmp eq i32 [[I]], 0
; CHECK-NEXT:    [[NEW_I]] = add i32 [[I]], -1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp uge i129 [[NEW_R1]], [[TMP1:%.*]]
; CHECK-NEXT:    br i1 [[TMP5]], label [[THEN:%.*]], label [[ELSE]]
; CHECK:       then:
; CHECK-NEXT:    [[NEW_R2:%.*]] = sub i129 [[NEW_R1]], [[TMP1]]
; CHECK-NEXT:    br label [[ELSE]]
; CHECK:       if.end:
; CHECK-NEXT:    [[R3]] = phi i129 [ [[NEW_R2]], [[THEN]] ], [ [[NEW_R1]], [[LOOP]] ]
; CHECK-NEXT:    br i1 [[LOOP_EXIT_COND]], label [[EXIT:%.*]], label [[LOOP]]
; CHECK:       exit:
; CHECK-NEXT:    ret i129 [[R3]]
;
