; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; This test checks that constant propagation done on the div/rem instruction
; (via -O2) gives the same result as using  the expandlargedivrem and then
; constant evaluating the result.
; RUN: opt -S -O2 < %s | FileCheck %s
; RUN: opt -S -expandlargedivrem < %s | opt -unroll-count=129 -inline-threshold=100000 -O2 -S | FileCheck %s

define {i129, i129} @test1() {
; CHECK-LABEL: @test1(
; CHECK-NEXT:    ret { i129, i129 } zeroinitializer
;
  %ret = call {i129, i129} @udivrem(i129 0, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @test2() {
; CHECK-LABEL: @test2(
; CHECK-NEXT:    ret { i129, i129 } { i129 1, i129 0 }
;
  %ret = call {i129, i129} @udivrem(i129 1, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @test3() {
; CHECK-LABEL: @test3(
; CHECK-NEXT:    ret { i129, i129 } { i129 2, i129 0 }
;
  %ret = call {i129, i129} @udivrem(i129 2, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @test4() {
; CHECK-LABEL: @test4(
; CHECK-NEXT:    ret { i129, i129 } { i129 1, i129 2 }
;
  %ret = call {i129, i129} @udivrem(i129 7, i129 5)
  ret {i129, i129} %ret
}

define {i129, i129} @test5() {
; CHECK-LABEL: @test5(
; CHECK-NEXT:    ret { i129, i129 } { i129 3, i129 4 }
;
  %ret = call {i129, i129} @udivrem(i129 19, i129 5)
  ret {i129, i129} %ret
}

define {i129, i129} @test6() {
; CHECK-LABEL: @test6(
; CHECK-NEXT:    ret { i129, i129 } { i129 340282366920938463463374607431768211455, i129 1 }
;

  %all_bits_set = sub i129 0, 1
  %ret = call {i129, i129} @udivrem(i129 %all_bits_set, i129 2)
  ret {i129, i129} %ret
}


; Signed test start here

define {i129, i129} @stest1() {
; CHECK-LABEL: @stest1(
; CHECK-NEXT:    ret { i129, i129 } zeroinitializer
;
  %ret = call {i129, i129} @sdivrem(i129 0, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest2() {
; CHECK-LABEL: @stest2(
; CHECK-NEXT:    ret { i129, i129 } zeroinitializer
;
  %ret = call {i129, i129} @sdivrem(i129 0, i129 -1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest3() {
; CHECK-LABEL: @stest3(
; CHECK-NEXT:    ret { i129, i129 } { i129 1, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 1, i129 1)
  ret {i129, i129} %ret
}


define {i129, i129} @stest4() {
; CHECK-LABEL: @stest4(
; CHECK-NEXT:    ret { i129, i129 } { i129 -1, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 1, i129 -1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest5() {
; CHECK-LABEL: @stest5(
; CHECK-NEXT:    ret { i129, i129 } { i129 2, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 2, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest6() {
; CHECK-LABEL: @stest6(
; CHECK-NEXT:    ret { i129, i129 } { i129 -2, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 2, i129 -1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest7() {
; CHECK-LABEL: @stest7(
; CHECK-NEXT:    ret { i129, i129 } { i129 -2, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 -2, i129 1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest8() {
; CHECK-LABEL: @stest8(
; CHECK-NEXT:    ret { i129, i129 } { i129 2, i129 0 }
;
  %ret = call {i129, i129} @sdivrem(i129 -2, i129 -1)
  ret {i129, i129} %ret
}

define {i129, i129} @stest9() {
; CHECK-LABEL: @stest9(
; CHECK-NEXT:    ret { i129, i129 } { i129 1, i129 2 }
;
  %ret = call {i129, i129} @sdivrem(i129 7, i129 5)
  ret {i129, i129} %ret
}

define {i129, i129} @stest10() {
; CHECK-LABEL: @stest10(
; CHECK-NEXT:    ret { i129, i129 } { i129 -1, i129 -2 }
;
  %ret = call {i129, i129} @sdivrem(i129 -7, i129 5)
  ret {i129, i129} %ret
}

define {i129, i129} @stest11() {
; CHECK-LABEL: @stest11(
; CHECK-NEXT:    ret { i129, i129 } { i129 3, i129 4 }
;
  %ret = call {i129, i129} @sdivrem(i129 19, i129 5)
  ret {i129, i129} %ret
}

define {i129, i129} @stest12() {
; CHECK-LABEL: @stest12(
; CHECK-NEXT:    ret { i129, i129 } { i129 -3, i129 4 }
;
  %ret = call {i129, i129} @sdivrem(i129 19, i129 -5)
  ret {i129, i129} %ret
}

define {i129, i129} @test13() {
; CHECK-LABEL: @test13(
; CHECK-NEXT:    ret { i129, i129 } { i129 -340282366920938463463374607431768211455, i129 0 }
;

  %min_int = shl i129 1, 128
  %max_int = sub i129 %min_int, 1
  %ret = call {i129, i129} @sdivrem(i129 %max_int, i129 -1)
  ret {i129, i129} %ret
}

define internal {i129, i129} @udivrem(i129 %a, i129 %b) {
  %q = udiv i129 %a, %b
  %r = urem i129 %a, %b

  %agg1 = insertvalue {i129, i129} undef, i129 %q, 0
  %agg2 = insertvalue {i129, i129} %agg1, i129 %r, 1

  ret {i129, i129}  %agg2
}

define internal {i129, i129} @sdivrem(i129 %a, i129 %b) {
  %q = sdiv i129 %a, %b
  %r = srem i129 %a, %b

  %agg1 = insertvalue {i129, i129} undef, i129 %q, 0
  %agg2 = insertvalue {i129, i129} %agg1, i129 %r, 1

  ret {i129, i129}  %agg2
}

