; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt < %s -analyze -scalar-evolution | FileCheck %s

; Canonicalize ext of minmax to minmax of ext if signedness matches.

define i64 @zext_umin(i32 %x, i32 %y) {
; CHECK-LABEL: 'zext_umin'
; CHECK-NEXT:  Classifying expressions for: @zext_umin
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x umin %y) U: full-set S: full-set
; CHECK-NEXT:    %e = zext i32 %s to i64
; CHECK-NEXT:    --> ((zext i32 %x to i64) umin (zext i32 %y to i64)) U: [0,4294967296) S: [0,4294967296)
; CHECK-NEXT:  Determining loop execution counts for: @zext_umin
;
  %c = icmp ult i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = zext i32 %s to i64
  ret i64 %e
}

define i64 @zext_umax(i32 %x, i32 %y) {
; CHECK-LABEL: 'zext_umax'
; CHECK-NEXT:  Classifying expressions for: @zext_umax
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x umax %y) U: full-set S: full-set
; CHECK-NEXT:    %e = zext i32 %s to i64
; CHECK-NEXT:    --> ((zext i32 %x to i64) umax (zext i32 %y to i64)) U: [0,4294967296) S: [0,4294967296)
; CHECK-NEXT:  Determining loop execution counts for: @zext_umax
;
  %c = icmp ugt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = zext i32 %s to i64
  ret i64 %e
}

define i64 @sext_smin(i32 %x, i32 %y) {
; CHECK-LABEL: 'sext_smin'
; CHECK-NEXT:  Classifying expressions for: @sext_smin
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x smin %y) U: full-set S: full-set
; CHECK-NEXT:    %e = sext i32 %s to i64
; CHECK-NEXT:    --> ((sext i32 %x to i64) smin (sext i32 %y to i64)) U: [-2147483648,2147483648) S: [-2147483648,2147483648)
; CHECK-NEXT:  Determining loop execution counts for: @sext_smin
;
  %c = icmp slt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = sext i32 %s to i64
  ret i64 %e
}

define i64 @sext_smax(i32 %x, i32 %y) {
; CHECK-LABEL: 'sext_smax'
; CHECK-NEXT:  Classifying expressions for: @sext_smax
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x smax %y) U: full-set S: full-set
; CHECK-NEXT:    %e = sext i32 %s to i64
; CHECK-NEXT:    --> ((sext i32 %x to i64) smax (sext i32 %y to i64)) U: [-2147483648,2147483648) S: [-2147483648,2147483648)
; CHECK-NEXT:  Determining loop execution counts for: @sext_smax
;
  %c = icmp sgt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = sext i32 %s to i64
  ret i64 %e
}

; Don't canonicalize if signedness differs.

define i64 @zext_smin(i32 %x, i32 %y) {
; CHECK-LABEL: 'zext_smin'
; CHECK-NEXT:  Classifying expressions for: @zext_smin
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x smin %y) U: full-set S: full-set
; CHECK-NEXT:    %e = zext i32 %s to i64
; CHECK-NEXT:    --> (zext i32 (%x smin %y) to i64) U: [0,4294967296) S: [0,4294967296)
; CHECK-NEXT:  Determining loop execution counts for: @zext_smin
;
  %c = icmp slt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = zext i32 %s to i64
  ret i64 %e
}

define i64 @zext_smax(i32 %x, i32 %y) {
; CHECK-LABEL: 'zext_smax'
; CHECK-NEXT:  Classifying expressions for: @zext_smax
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x smax %y) U: full-set S: full-set
; CHECK-NEXT:    %e = zext i32 %s to i64
; CHECK-NEXT:    --> (zext i32 (%x smax %y) to i64) U: [0,4294967296) S: [0,4294967296)
; CHECK-NEXT:  Determining loop execution counts for: @zext_smax
;
  %c = icmp sgt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = zext i32 %s to i64
  ret i64 %e
}

define i64 @sext_umin(i32 %x, i32 %y) {
; CHECK-LABEL: 'sext_umin'
; CHECK-NEXT:  Classifying expressions for: @sext_umin
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x umin %y) U: full-set S: full-set
; CHECK-NEXT:    %e = sext i32 %s to i64
; CHECK-NEXT:    --> (sext i32 (%x umin %y) to i64) U: [-2147483648,2147483648) S: [-2147483648,2147483648)
; CHECK-NEXT:  Determining loop execution counts for: @sext_umin
;
  %c = icmp ult i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = sext i32 %s to i64
  ret i64 %e
}

define i64 @sext_umax(i32 %x, i32 %y) {
; CHECK-LABEL: 'sext_umax'
; CHECK-NEXT:  Classifying expressions for: @sext_umax
; CHECK-NEXT:    %s = select i1 %c, i32 %x, i32 %y
; CHECK-NEXT:    --> (%x umax %y) U: full-set S: full-set
; CHECK-NEXT:    %e = sext i32 %s to i64
; CHECK-NEXT:    --> (sext i32 (%x umax %y) to i64) U: [-2147483648,2147483648) S: [-2147483648,2147483648)
; CHECK-NEXT:  Determining loop execution counts for: @sext_umax
;
  %c = icmp ugt i32 %x, %y
  %s = select i1 %c, i32 %x, i32 %y
  %e = sext i32 %s to i64
  ret i64 %e
}
